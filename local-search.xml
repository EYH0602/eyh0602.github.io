<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ÊÑÅÂÆπÊª°Èù¢Ôºå‰ΩÜÂÉèÈ™ëÂ£´‰∏ÄÊ†∑ÂÜ≤Èîã</title>
    <link href="/2024/09/23/knight/"/>
    <url>/2024/09/23/knight/</url>
    
    <content type="html"><![CDATA[<h1 id="ÊÑÅÂÆπÊª°Èù¢Ôºå‰ΩÜÂÉèÈ™ëÂ£´‰∏ÄÊ†∑ÂÜ≤Èîã"><a href="#ÊÑÅÂÆπÊª°Èù¢Ôºå‰ΩÜÂÉèÈ™ëÂ£´‰∏ÄÊ†∑ÂÜ≤Èîã" class="headerlink" title="ÊÑÅÂÆπÊª°Èù¢Ôºå‰ΩÜÂÉèÈ™ëÂ£´‰∏ÄÊ†∑ÂÜ≤Èîã"></a>ÊÑÅÂÆπÊª°Èù¢Ôºå‰ΩÜÂÉèÈ™ëÂ£´‰∏ÄÊ†∑ÂÜ≤Èîã</h1><p>ToDo, placeholder.</p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Be Careful Using Python Iterator</title>
    <link href="/2023/08/20/py-iterator/"/>
    <url>/2023/08/20/py-iterator/</url>
    
    <content type="html"><![CDATA[<h1 id="Be-Careful-Using-Python-Iterator"><a href="#Be-Careful-Using-Python-Iterator" class="headerlink" title="Be Careful Using Python Iterator"></a>Be Careful Using Python Iterator</h1><p>In a recent experiment, I encountered a bug where all the results were shown as negative.After debugging, I found that the bug was caused by using the same iterator twice.My library API was designed to take a list of tuples as input,but when I called it later, I passed in a <code>map</code> object.</p><p>My API extracts the first and second elements of the tuple anduses them independently to obtain the experiment results.However, every time I ran the experiment,the list of second elements was empty,resulting in all negative results.</p><p>So, the key takeaway is that <strong>a Python iterator can only be consumed once</strong>!!</p><h2 id="Reproduction"><a href="#Reproduction" class="headerlink" title="Reproduction"></a>Reproduction</h2><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python3">def foo(x: int) -&gt; tuple[int, int]:<br>    return (x, x + 1)<br><br><br>xs &#x3D; [1, 2, 3]<br><br># case 1: list comprehension<br>ys &#x3D; [foo(x) for x in xs]<br>ys_fst &#x3D; [y[0] for y in ys]<br>ys_snd &#x3D; [y[1] for y in ys]<br><br># case 2: map<br>zs &#x3D; map(foo, xs)<br>zs_fst &#x3D; [z[0] for z in zs]<br>zs_snd &#x3D; [z[1] for z in zs]<br><br>print(ys_fst &#x3D;&#x3D; zs_fst)<br>print(ys_snd &#x3D;&#x3D; zs_snd)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>programming</tag>
      
      <tag>functional</tag>
      
      <tag>computer science</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Clang Global Constructors</title>
    <link href="/2023/08/07/global-constructors/"/>
    <url>/2023/08/07/global-constructors/</url>
    
    <content type="html"><![CDATA[<h1 id="Global-Constructors-Generated-by-Clang"><a href="#Global-Constructors-Generated-by-Clang" class="headerlink" title="Global Constructors Generated by Clang"></a>Global Constructors Generated by Clang</h1><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>In <a href="https://github.com/SecurityLab-UCD/ReportFunctionExecutedPass">ReportFunctionExecutedPass</a>,we are trying to build a customized C/C++ compiler for our research project to gather IO pairs of functions when fuzzing.We achieve this goal by building an LLVM Function Pass and using it as a plugin when compiling with clang.Recently, we discovered that if the target program includes <code>&lt;iostream&gt;</code>,the compiled executable will always result in a <strong>floating point exception</strong>.</p><h2 id="Reproduction"><a href="#Reproduction" class="headerlink" title="Reproduction"></a>Reproduction</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;<br></code></pre></div></td></tr></table></figure><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>After diagnosing the issue,I found that the problem is caused by<a href="https://github.com/SecurityLab-UCD/ReportFunctionExecutedPass/blob/60ed2c299a060c36afd644ba86d9613d9cca7c7b/ExecHashMap.hpp#L109">inserting into a hash table</a>.Since the key of the table is a <code>std::string</code>,I suspected that the problem arises from hashing a string.To verify this, I attempted to avoid using a hash by changing the <code>unordered_map</code> to a <code>map</code>.However, the problem still persisted.Now, <code>table.find()</code> works fine, but <code>table.insert()</code> still triggers the exception.</p><p>Next, I used a debugger to step into the <code>insert()</code> function anddiscovered that the exception is caused by reporting <code>__cxx_global_var_init</code> and <code>_GLOBAL__sub_I_example.cpp</code>.These two functions are only reported when <code>#include &lt;iostream&gt;</code> is used.</p><p>Upon further investigation,I found that these two functions are<a href="https://discourse.llvm.org/t/static-constructors-cxx-global-var-initn-vs-global-sub-i-xxx/39442">global constructors</a>generated by the clang frontend.However, these functions do not meet our requirements for the functions to be reported,so I ignore them in the pass to ensure the compiled executable functions properly.</p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>compilers</tag>
      
      <tag>computer science</tag>
      
      <tag>LLVM</tag>
      
      <tag>clang</tag>
      
      <tag>frontend</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Category Theory as Mathematical Foundation</title>
    <link href="/2023/03/06/category-foundation/"/>
    <url>/2023/03/06/category-foundation/</url>
    
    <content type="html"><![CDATA[<h1 id="What-are-some-objections-to-taking-category-theory-as-a-mathematical-foundation"><a href="#What-are-some-objections-to-taking-category-theory-as-a-mathematical-foundation" class="headerlink" title="What are some objections to taking category theory as a mathematical foundation?"></a>What are some objections to taking category theory as a mathematical foundation?</h1><p>Category theory (CT) is a two sorted system of objects and arrows such that the axioms are satisfied. To take something as a mathematical foundation is to give an account of structure or system that has a structure while staying true to the Hilbert/Dedekind theory instead of the Fregean approach. To achieve this, we can either take set theory or category theory as the background theory that allows us to talk about structure or system. Taking category theory as a mathematical foundation means that either structures are some kind of category, or systems are categories. However, there are many objections to this approach from philosophers like Feferman, Shapiro, and Hellman.</p><h3 id="Objection-1-Does-CT-depend-on-set-theory-class-theory"><a href="#Objection-1-Does-CT-depend-on-set-theory-class-theory" class="headerlink" title="Objection 1: Does CT depend on set theory / class theory?"></a>Objection 1: Does CT depend on set theory / class theory?</h3><p>The first problem of taking category theory as a mathematical foundation is the dependency, or the question of ‚Äúdoes CT depend on set theory / class theory?‚Äù Suppose we define CT as a two sorted system with sets as ‚Äòobject‚Äô and functions as ‚Äòarrow‚Äô, as ETCS. This objection from Feferman questions whether the intensional notion of set is logically/epistemologically/conceptually prior to the notion of category. Then we still need set theory as a foundation.</p><h3 id="Objection-2-Only-at-object-level-at-the-meta-level-you-have-to-ST-as-a-Fregeian-foundation"><a href="#Objection-2-Only-at-object-level-at-the-meta-level-you-have-to-ST-as-a-Fregeian-foundation" class="headerlink" title="Objection 2: Only at object level, at the meta-level you have to ST as a Fregeian foundation."></a>Objection 2: Only at object level, at the meta-level you have to ST as a Fregeian foundation.</h3><p>The objection from Shapiro states that we can be a Hilbertian about CT at the object level but not the meta-level. In other words, to talk about the meta-level of category, we still need the set theory. Therefore, at the meta-level we still have to take set theory as a Fregeian foundation. A problem is on the size of category. To define the category of categories would cause a chain of regress to set theory, class theory, and universe theory. To avoid this infinite regress of meta theories, we need to take it on a Fregean foundation.</p><h3 id="Objection-3-If-thenist-attempt-to-stop-the-regress-will-end-in-the-problem-facing-the-deductist"><a href="#Objection-3-If-thenist-attempt-to-stop-the-regress-will-end-in-the-problem-facing-the-deductist" class="headerlink" title="Objection 3: If-thenist attempt to stop the regress will end in the problem facing the deductist."></a>Objection 3: If-thenist attempt to stop the regress will end in the problem facing the deductist.</h3><p>A problem is on the size of category. To define the category of categories would cause a chain of regress to set theory, class theory, and universe theory. To avoid this infinite regress of meta theories, we need to take it on a Fregean foundation.</p><h3 id="As-ifism-to-solve-the-objections"><a href="#As-ifism-to-solve-the-objections" class="headerlink" title="As-ifism to solve the objections"></a>As-ifism to solve the objections</h3><p>To solve these objections, we can use the CCAF definition as the meta theory, where a category <strong>Cat</strong> is a two sorted system with categories as ‚Äòobjects‚Äô and functors as ‚Äòarrows‚Äô. However, some problem still exists with this CCAF definition. Since the category has a size problem, the category of all categories <strong>CAT</strong> will not be a category, which is not well-formed. Then the problem of infinite regress still exists. Another approach is to use As-ifism to cut a midpoint, which takes the background not as Fregean theory but as if they were consistent.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mathematical Structuralism</title>
    <link href="/2023/02/26/mathematical-structuralism/"/>
    <url>/2023/02/26/mathematical-structuralism/</url>
    
    <content type="html"><![CDATA[<h1 id="The-difference-between-in-re-and-ante-rem-mathematical-structuralism"><a href="#The-difference-between-in-re-and-ante-rem-mathematical-structuralism" class="headerlink" title="The difference between in re and ante rem mathematical structuralism."></a>The difference between <em>in re</em> and <em>ante rem</em> mathematical structuralism.</h1><h2 id="Priority-of-Structure-to-Object"><a href="#Priority-of-Structure-to-Object" class="headerlink" title="Priority of Structure to Object"></a>Priority of Structure to Object</h2><p>Mathematical structuralism is a view that takes structural as first-class citizens in philosophy.Mathematical structuralism takes account of axioms,that says that axioms define structure, or they define systems that have a structure.In this view, an object is just a position in such a structure or a system that has a structure.There are two position on mathematical structuralism: <em>in re</em> and <em>ante rem</em>.These two position are about the <em>priority</em> of structure to object in mathematics.There are three sense of <em>priority</em>:</p><ol><li>ontological sense: structures are ontologically prior to objects (<em>ante rem</em>),</li><li>semantic sense: <em>systems that have a structure</em> are semantically prior to objects (<em>in re</em>),</li><li>methodological sense: system that have a structure are methodologically prior to object (<em>in re</em>).</li></ol><h2 id="Illustrating-the-Difference-between-In-Re-and-Ante-Rem"><a href="#Illustrating-the-Difference-between-In-Re-and-Ante-Rem" class="headerlink" title="Illustrating the Difference between In Re and Ante Rem"></a>Illustrating the Difference between In Re and Ante Rem</h2><p>In general, <em>ante rem</em> believes that objects comes before structure,whereas <em>in re</em> believes that objects are in the structure.To further illustrate the difference between <em>in re</em> and <em>ante rem</em>,we can take the sentence ‚ÄúThe rose is red‚Äù as an example.For <em>in re</em>, the sentence would be interpreted asredness is in the rose, we come to know red by individuals of roses.This shows the idea of universal in the particular and there are only particulars.But for <em>ante rem</em>, it would bethe rose is red because it exemplifies/instantiates Redness,which takes universal over and above the particular and types over and above tokens.</p><h2 id="Other-Views-on-Priority-of-Structures-in-Mathematics"><a href="#Other-Views-on-Priority-of-Structures-in-Mathematics" class="headerlink" title="Other Views on Priority of Structures in Mathematics"></a>Other Views on Priority of Structures in Mathematics</h2><p>The representatives of <em>in re</em> and <em>ante rem</em> view of <em>priority</em> are Hellman and Shapiro.Although these are the two main approaches to understand the semantic sense and ontological sense of priority of structures in mathematics,there still exists other views.In stead of viewing background theories are taken to giveactual structure or possible system.As-ifism act as if our axioms are true and this allows us to make methodological use of objects for the purpose of solving problems.Therefore, as-ifism use category theory as a background language to talk about systems that have a structure.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Workout Plan 2023 03</title>
    <link href="/2023/02/26/WorkoutPlan202304/"/>
    <url>/2023/02/26/WorkoutPlan202304/</url>
    
    <content type="html"><![CDATA[<h1 id="Workout-Plan"><a href="#Workout-Plan" class="headerlink" title="Workout Plan"></a>Workout Plan</h1><p>6 week, deadlift 345lb -&gt; 365lb</p><p>This plan is generated by <a href="https://chat.openai.com/chat">ChatGPT</a>.I‚Äôll try it and see if ChatGPT‚Äôs plan actually works.</p><h2 id="Week-1-2"><a href="#Week-1-2" class="headerlink" title="Week 1-2:"></a>Week 1-2:</h2><p><del><strong>Day 1:</strong></del></p><ul><li>Warm up with dynamic stretches.</li><li>3 sets of 5 reps at 70% of 1RM.</li><li>3 sets of 3 reps at 80% of 1RM.</li><li>2 sets of 1 rep at 90% of 1RM.</li></ul><p>Week 1 Day 1: New PR 355lb</p><p><strong>Day 2:</strong></p><ul><li>Warm up with dynamic stretches.</li><li>5 sets of 5 reps at 60% of 1RM.</li></ul><h2 id="Week-3-4"><a href="#Week-3-4" class="headerlink" title="Week 3-4:"></a>Week 3-4:</h2><p><strong>Day 1:</strong></p><ul><li>Warm up with dynamic stretches.</li><li>4 sets of 4 reps at 75% of 1RM.</li><li>3 sets of 2 reps at 85% of 1RM.</li></ul><p><strong>Day 2:</strong></p><ul><li>Warm up with dynamic stretches.</li><li>6 sets of 3 reps at 70% of 1RM.</li></ul><h2 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5:"></a>Week 5:</h2><p><strong>Day 1:</strong></p><ul><li>Warm up with dynamic stretches.</li><li>3 sets of 3 reps at 80% of 1RM.</li><li>2 sets of 2 reps at 90% of 1RM.</li><li>1 set of 1 rep at 95% of 1RM.</li></ul><p><strong>Day 2:</strong></p><ul><li>Warm up with dynamic stretches.</li><li>5 sets of 2 reps at 85% of 1RM.</li></ul><h2 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6:"></a>Week 6:</h2><p><strong>Day 1:</strong></p><ul><li>Warm up with dynamic stretches.</li><li>2 sets of 2 reps at 90% of 1RM.</li><li>1 set of 1 rep at 100% of 1RM.</li></ul><p><strong>Day 2:</strong></p><ul><li>Warm up with dynamic stretches.</li><li>3 sets of 1 rep at 95% of 1RM.</li></ul><p>Remember to include accessory exercises like Romanian deadlifts, bent over rows, and weighted pull-ups to strengthen the muscles used in deadlifting, and to prioritize recovery and rest days to avoid overtraining and injury. Good luck with your training!</p>]]></content>
    
    
    <categories>
      
      <category>Random</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mathematical Realism</title>
    <link href="/2023/02/19/mathreal/"/>
    <url>/2023/02/19/mathreal/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-mathematical-realism-and-what-problems-does-it-face"><a href="#What-is-mathematical-realism-and-what-problems-does-it-face" class="headerlink" title="What is mathematical realism and what problems does it face?"></a>What is mathematical realism and what problems does it face?</h1><p>Mathematical realism is a philosophy view that believes mathematical objects,such as numbers, sets, functions, groups, ringsexists independent of us,the way they are in mathematical realm fixes truth,and we came to know those objects directly or indirectly through some experiments.That means that mathematical objects were discovered, rather than invented, and their properties are independent of our beliefs or attitudes towards them.There are a few problems it faces,two of them are the problem of epistemic access and the problem of ontology.</p><h2 id="Problem-of-Ontology-and-Epistemic-Access"><a href="#Problem-of-Ontology-and-Epistemic-Access" class="headerlink" title="Problem of Ontology and Epistemic Access"></a>Problem of Ontology and Epistemic Access</h2><p>These two questions we are going to discuss are related tothe existence of mathematical objects and its relationship with us.The problem with <em>ontology</em> is the question ofwhat kinds of objects exist in the mathematical domain, and how we can determine their properties and relations.In other words, what object is considered mathematical object?For example, is semi-groups considered mathematical object or a collection of mathematical objects that have associative binary operator defined?</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Semigroup</span> a <span class="hljs-keyword">where</span></span> <span class="hljs-comment">-- associative binary operator</span><br>  (&lt;&gt;) :: a -&gt; a -&gt; a <span class="hljs-comment">-- a &lt;&gt; (b &lt;&gt; c) == (a &lt;&gt; b) &lt;&gt; c</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Semigroup</span> a =&gt; <span class="hljs-type">Monoid</span> a <span class="hljs-keyword">where</span></span> <span class="hljs-comment">-- with identity element</span><br>  mempty :: a <span class="hljs-comment">-- a &lt;&gt; mempty == a</span><br></code></pre></div></td></tr></table></figure><p>The same idea also apply to other structures like monoid, group, rings, etc.</p><p>In addition to the problem of <em>ontology</em>,the problem with <em>epistemic access</em> mainly states thatif mathematical objects exists independently of us,how do we have knowledge about them?When viewing mathematical objects as abstract objects,we cannot gain knowledge or experience of them directly.</p><h2 id="Mathematical-Nominalism"><a href="#Mathematical-Nominalism" class="headerlink" title="Mathematical Nominalism"></a>Mathematical Nominalism</h2><p>Since there are problems with mathematical realism,mathematical nominalism is an alternative view to avoid the problem of ‚Äúindependent of us‚Äù.On this position, mathematical objects are true only in a conventional or linguistic sense,or they are just names given by mathematicians.Since objects are just names in the language,there is no problem with access as how we defined the language.However, mathematical nominalism faces problems likethe reliability of mathematical objects and the usefulness of mathematicalsince objects now are just names given in a language.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dedekind&#39;s Structuralist View of Natural Numbers</title>
    <link href="/2023/02/14/DedekindStructuralism/"/>
    <url>/2023/02/14/DedekindStructuralism/</url>
    
    <content type="html"><![CDATA[<h1 id="Connect-Dedekind‚Äôs-structuralist-view-of-natural-numbers-to-the-Hilbert-and-Bernays-quotes"><a href="#Connect-Dedekind‚Äôs-structuralist-view-of-natural-numbers-to-the-Hilbert-and-Bernays-quotes" class="headerlink" title="Connect Dedekind‚Äôs structuralist view of natural numbers to the Hilbert and Bernays quotes"></a>Connect Dedekind‚Äôs structuralist view of natural numbers to the Hilbert and Bernays quotes</h1><blockquote><p>Hilbert: We think of ‚Ä¶ points, straight lines, and plans as having certain mutual relations, whichwe indicate by means of such works as ‚Äúare situated‚Äù, ‚Äúbetween‚Äù, ‚Äúparallel‚Äù, ‚Äúcongruent‚Äù,‚Äúcontinuous‚Äù, etc. The complete and exact description of these relations flows as a consequenceof the axioms of geometry.</p><p>Bernays: A main feature of Hilbert‚Äôs axiomatization of geometry is that the axiomaticmethod is presented and practiced in the spirit of the abstract conception of axiomaticsthat arose at the end of the nineteenth century and which has been generally adopted inmodern mathematics. It consists in abstracting from the intuitive meaning of the terms forthe kinds of primitive objects (individuals) and for the fundamental relations and inunderstanding the assertions (theorems) of the axiomatized theory in a hypothetical sense,that is, as holding true for any interpretation or determination of the kinds of individualsand of the fundamental relations for which the axioms are satisfied. Thus, an axiomsystem is regarded not as a system of statements about a subject matter but as a system ofconditions for what might be called a relational structure.-&gt; a theory gives a relational structure</p></blockquote><h2 id="Dedekind‚Äôs-view"><a href="#Dedekind‚Äôs-view" class="headerlink" title="Dedekind‚Äôs view"></a>Dedekind‚Äôs view</h2><p>Dedekind‚Äôs structuralist view of natural numbers is a theory thatnatural numbers should be defined as a system in terms of their properties and relationshipsas said out in the Peano axioms $P^2A$.In fact, for Dedekind, such a system is not limited to ${1, 2, 3, \ldots}$,it is whatever satisfies axioms, for example</p><ul><li>${0, 1, 2, \ldots}$,</li><li>${ \emptyset, \{\emptyset\}, \{\{\emptyset\}\}, \ldots }$,</li><li>${\lambda f. \lambda x.x, \lambda f. \lambda x.fx, \lambda f. \lambda x.f(fx), \ldots}$,</li></ul><p>or any $\omega$-sequence satisfies the axioms are natural numbers.I will describe the similarities between Dedekind‚Äôs structuralist view of natural numbers to the Hilbert and Bernays quotes,then conclude with some difference between Hilbert‚Äôs view and Dedekind‚Äôs view.</p><h2 id="Variable-Domain"><a href="#Variable-Domain" class="headerlink" title="Variable Domain"></a>Variable Domain</h2><p>For Hilbert, from his quote listed, geometry objectslike points, lines, and planes are defined by the relations between them,such as ‚Äúare situated‚Äù, ‚Äúbetween‚Äù, ‚Äúparallel‚Äù, ‚Äúcongruent‚Äù, ‚Äúcontinuous‚Äù, etc.These are all relations set by the axioms.In other words, we implicitly defines the objects in virtual of relations that are given by axioms.This view gives the notion of *variable domain‚Äù.That is, points, lines, planes can be anything,even chairs, tables, coffee mugs,as long as they satisfies the relations given the axioms.In comparison to Dedekind‚Äôs view of natural numbers,Dedekind believed that any system satisfies $P^2A$ is a system of natural numbers.There two views from Hilbert and Dedekind ares just as described in Bernays quote‚Äúan axiom system is regarded not as a system of statements about a subject matterbut as a system of conditions for what might be called a relational structure.‚Äù</p><p>In conclusion to Hilbert‚Äôs view of geometry and Dedekind‚Äôs view of natural numbersis that whether the axioms is <em>categorical</em>.That is, all the systems that satisfies the axioms are equivalent up to isomorphism.Although similar, there is still a different between these two views.Hilbert believed that axioms define <em>structure</em>,whereas Dedekind believed that axioms define <em>systems that have a structure</em>.Other than this difference,the same central idea is that an object is defined solely un terms of its relations,which is (sort of) prove by the Yoneda Lemma.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frege-Hilbert Controversy</title>
    <link href="/2023/02/12/FregeHilbertDebate/"/>
    <url>/2023/02/12/FregeHilbertDebate/</url>
    
    <content type="html"><![CDATA[<h1 id="What-was-the-Frege-Hilbert-debate-and-what-difference-did-it-reveal-between-Frege-and-Hilbert"><a href="#What-was-the-Frege-Hilbert-debate-and-what-difference-did-it-reveal-between-Frege-and-Hilbert" class="headerlink" title="What was the Frege/Hilbert debate and what difference did it reveal between Frege and Hilbert?"></a>What was the Frege/Hilbert debate and what difference did it reveal between Frege and Hilbert?</h1><h2 id="Frege‚Äôs-view"><a href="#Frege‚Äôs-view" class="headerlink" title="Frege‚Äôs view"></a>Frege‚Äôs view</h2><p>The Frege Hilbert debate was a controversy about the nature of geometry.Gottlob Frege viewed geometry as purely logical concepts.He believed that the definition ofgeometric objects were constructed from the intuition of space.Then the definitions given out the axioms,and sentences about geometry follow from the definitions and axioms by proof.Based on this believe,Frege argued that mathematical objects,such as point, line, and plane,existed independently of out knowledge of them.Thus Frege‚Äôs reasoning followed thatdefinition/axioms $\rightarrow$ truth $\rightarrow$ consistency.This view of logicism is later challenged by Russell‚Äôs Paradox.</p><h2 id="Hilbert‚Äôs-view"><a href="#Hilbert‚Äôs-view" class="headerlink" title="Hilbert‚Äôs view"></a>Hilbert‚Äôs view</h2><p>Davis Hilbert, on the other hand,thought that geometry starts from axiomswhich implicitly define the things that satisfies them.Sentences then follows from axioms.Based on this view,Hilbert argued that mathematical objects and truths are constructed by mathematiciansand they were ultimately dependent on our ability to manipulate and reason about them.In other words, whatever satisfies the axioms are mathematical objects,and they mean whatever the axioms says they mean.Therefore, axioms serves as schema for concepts,and mathematical objects has variable domains,or to say they have no fixed meaning.Hilbert‚Äôs view of geometry followsconsistency of axioms $\rightarrow$ truth $\rightarrow$ existence,which implies that consistency of axioms is the foundation of mathematics.Consistency of axioms system is later proved not exists by Godel‚Äôs inconsistency theorem.</p><p>This debate revealed fundamental difference between the two view of mathematicsregarding the nature of mathematical truthand the role of logic and intuition in mathematics.These two different views is later described as Realism and Formalism,also described the relationship between mathematics and human.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hilbert&#39;s Program and Godel&#39;s Inconsistency Theorem</title>
    <link href="/2023/02/09/GodelHilbert/"/>
    <url>/2023/02/09/GodelHilbert/</url>
    
    <content type="html"><![CDATA[<h1 id="What-are-Godel‚Äôs-Theorem-and-how-did-they-collapse-Hilbert‚Äôs-program"><a href="#What-are-Godel‚Äôs-Theorem-and-how-did-they-collapse-Hilbert‚Äôs-program" class="headerlink" title="What are Godel‚Äôs Theorem and how did they collapse Hilbert‚Äôs program?"></a>What are Godel‚Äôs Theorem and how did they collapse Hilbert‚Äôs program?</h1><p>Hilbert‚Äôs program is a way to show that an axioms system is both consistent and complete.Godel‚Äôs incompleteness theorems has two parts:</p><ol><li>no consistent system of axioms whose theorem are effective that can prove all the truth of arithmetic;</li><li>any such system cannot prove its own consistency.The second theorem proves that Hilbert‚Äôs program was not achievable and mathematics is inherently incomplete.After demonstrating the idea of Hilbert‚Äôs program and how Godel‚Äôs Theorem undermines it,I will conclude with some way to circumvent the limitation of Godel‚Äôs Theorem.</li></ol><h2 id="Hilbert‚Äôs-Program"><a href="#Hilbert‚Äôs-Program" class="headerlink" title="Hilbert‚Äôs Program"></a>Hilbert‚Äôs Program</h2><p>Hilbert, who sometimes be interpreted as a formalist,aimed to show that geometry is founded by its axioms.To achieve this, we need show that the axiom system is both consistent and complete by proof in logic.This goal of proving is known as Hilbert‚Äôs program.To Hilbert, axioms are not truth but scheme for talking about axioms.For him, consistency implies existence and truth.% notion of consistencyHilbert first shows that geometry is consistentsince it can be interpreted by real numbers.In other words, geometry is consistency in relative to analysis.Therefore, the axioms of geometry is satisfied by the theory of analysis.The way of using another system to proof the consistency of a system is called a <em>relative consistency proof</em>.However, we then need to show the consistency of analysis.The question becomes to deduce the whole mathematics to a finite set of axioms which is consistent and complete,then use this set of axioms to give a <em>absolute consistency proof</em>.The Second Incompleteness Theorem states that such a axioms system does not exist,which completely undermines the Hilbert‚Äôs program.</p><h2 id="proof-cannot-capture-truth"><a href="#proof-cannot-capture-truth" class="headerlink" title="proof cannot capture truth"></a>proof cannot capture truth</h2><p>Although Godel‚Äôs Incompleteness Theorem shows that none axiom system can shows its own consistency,it only deny the existence of <em>absolute consistency proof</em> but not <em>relative consistency proof</em>.Upon assuming the correctness of a axioms system,we can still deduce further theorem based on the assumptions.For example, upon the Peano Axioms we can build the theory of real analysis.This idea is akin to As-ifism wherewe take hypothesis <u>as if</u> they were true.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kant&#39;s View of Concepts</title>
    <link href="/2023/02/05/concepts/"/>
    <url>/2023/02/05/concepts/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-the-difference-between-construction-of-concepts-and-analysis-of-concepts"><a href="#What-is-the-difference-between-construction-of-concepts-and-analysis-of-concepts" class="headerlink" title="What is the difference between construction of concepts and analysis of concepts?"></a>What is the difference between construction of concepts and analysis of concepts?</h1><p>Construction of concepts and analysis of concepts are two ideas derived from Kant‚Äôs idea of concepts,corresponding to mathematics and philosophy.They are two different to reason about concepts.</p><h2 id="Relationship-between-Subject-and-Predicates"><a href="#Relationship-between-Subject-and-Predicates" class="headerlink" title="Relationship between Subject and Predicates"></a>Relationship between Subject and Predicates</h2><p>To reason about concepts, we use the language of ‚ÄúSubjects is Predicate.‚ÄùSynthetic a-posteriori is where predicate is not contained in the subject and get added by experience.For example, ‚ÄúAll bodies are heavy‚Äù,where the predicate ‚Äúheavy‚Äù is based on experience.On the other hand,analytic, a-priori is where predicate is contained in the subject before experience by reason.For example, ‚ÄúAll bachelors are unmarried‚Äù,where the predicate ‚Äúunmarried‚Äù is the meaning of the subject ‚Äúbachelors‚Äù.And other permutations of synthetic a-priori and analytic a-priori is allowed.Then, as defined above,synthetic a-priori judgement is a sentence thatthe predicate is not contained in the subject,but is a condition for the possibility of experience the subject.</p><p>From the above, we can see that the idea of concepts lies between subjects and predicates.Philosophers analysis the relationship between concepts in terms of subjects and predicates.Whereas viewing mathematics as synthetic a-priori,to construct concepts, subjects and predicates can be brought together by either intuition of time of space.For example, with the intuition of time,we can start with a moment and get the next moment, its successor, from it,which results in the concepts of arithmetics.On the other hand, with the intuition of space,we can start with a point, and form a line with the points.Then the lines can form figures, which results in the concepts of geometry.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>As-ifism</title>
    <link href="/2023/01/31/asifism/"/>
    <url>/2023/01/31/asifism/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-mathematical-as-ifism"><a href="#What-is-mathematical-as-ifism" class="headerlink" title="What is mathematical as-ifism?"></a>What is mathematical as-ifism?</h1><p>Mathematical as-ifism is to cut in-between realism and non-realism.Instead of requiring the objects to exists,as-ifism makes use of stable definition to deduce a conclusion.As-ifism utilize hypothetical method, which follows thattake our hypothesis <u>as if</u> they were true,make use of <strong>stable definitions</strong>,make use of some deductive process,which then result in conclusion.That is, instead of existence $\rightarrow$ truth,we assume truth then deduce existence. </p><h2 id="In-comparison-to-Realism"><a href="#In-comparison-to-Realism" class="headerlink" title="In comparison to Realism"></a>In comparison to Realism</h2><p>Mathematical realism  believe that mathematical objects are part of the meta-physical realm.In this position, mathematical objects exists independently.In this meta-physical realm, the way objects are fixes the truth about them,and we come to know these objects via reasoning through the dialectical method.Therefore, for statements to hold, the objects in the statements has to exist.For example, let <code>2 is even</code> be true analogous to <code>the ball is read</code> is true,then both the mathematical object <code>2</code> and the physical object <code>ball</code> has to exists.From existence, realism then have reference and satisfaction,then can explain truth in terms of satisfaction.However, existence is not often easy to detect.In this case, as-ifism provides a way to get existence from they hypothesis as they were true.For example, if we only have the the arithmetic definition of numbers (natural numbers but not the real numbers),$\sqrt{2}$ does not exist in the realm.But if start with the geometric definition of numbers,we can deduce that the length of the side that will double the area of the square is $2\sqrt{2}$.</p><p>In comparison to realism and non-realism,as-ifism explain satisfaction in terms of truthrather than explain truth in terms of satisfaction of the predicate.With the assumption of something being truth,there must be something making it true.In this way, we can avoid the problem of requiring existence to derive truth.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Meno&#39;s Paradox</title>
    <link href="/2023/01/29/meno/"/>
    <url>/2023/01/29/meno/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-the-hypothetical-or-mathematician‚Äôs-method-and-how-does-it-solve-Meno‚Äôs-Paradox"><a href="#What-is-the-hypothetical-or-mathematician‚Äôs-method-and-how-does-it-solve-Meno‚Äôs-Paradox" class="headerlink" title="What is the hypothetical (or mathematician‚Äôs) method and how does it solve Meno‚Äôs Paradox?"></a>What is the hypothetical (or mathematician‚Äôs) method and how does it solve Meno‚Äôs Paradox?</h1><h2 id="what-is-hypothetical-method"><a href="#what-is-hypothetical-method" class="headerlink" title="what is hypothetical method"></a>what is hypothetical method</h2><p>The Hypothetical Method, also called Mathematician‚Äôs method, is a way of reasoning that only requires stable definitions instead of stable objects.The hypothetical method is proposed by Plato and follows steps as begin with a hypothesis, act as if it was a first principle whose truth cannot be doubted, then reason consistently down to a conclusion with the aim of solving the problem.The Meno‚Äôs Paradox questions how will we look for something when we don‚Äôt know what it is; and how will we know we‚Äôve found it when we don‚Äôt at least know what it is. After demonstrating how to solve Meno‚Äôs Paradox by the hypothetical method, I will conclude with some limitations of this method.</p><h2 id="how-does-it-solve-Meno‚Äôs-Paradox"><a href="#how-does-it-solve-Meno‚Äôs-Paradox" class="headerlink" title="how does it solve Meno‚Äôs Paradox"></a>how does it solve Meno‚Äôs Paradox</h2><p>To resolve Meno‚Äôs Paradox, Plato developed the hypothetical method thatonly looks at inconsistency outside its domain or external consistency.By using mathematician‚Äôs method, we can get a kind of knowledge that is secure as any knowledge.To have knowledge without knowing what something is, we can just set a hypothesis and see if we can deduce an answer from that hypothesis.% example, the Meno DemonstrationFor example, we know that there exists a length of the side that will double the area of the square.We don‚Äôt have to know that length is $2\sqrt{2}$.Following the mathematical method, we can begin with the definition of a square.Suppose there is a square with side length of $2$ units, then the area of that square is $4$ by definition of the area of the square.To double the area of the square, we wish to find the length of the sides that will double the area of the square.If we double the length of the origional sides, we will quadruple the area to $16$.Then with the definition of the diagonal of the square, which will half area of any square, we can get a square of area $8$ out of the quadrupled square.Therefore we deduced an answer to the question without knowing that is the actual side length is.</p><h2 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h2><p>However, the hypothesis method has some limitations.Deducing from a hypothesis, we can only yield what is called <em>true opinion</em>, not knowledge.Since this true opinion depends on the hypothesis, it is not stable, which means that if the hypothesis is wrong, so is that conclusion.</p>]]></content>
    
    
    <categories>
      
      <category>Philosophy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
      <tag>philosophy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>proxytunnel on MAC</title>
    <link href="/2022/12/13/proxytunnel-MAC/"/>
    <url>/2022/12/13/proxytunnel-MAC/</url>
    
    <content type="html"><![CDATA[<h1 id="Use-Proxytunnel-on-M1-Mac"><a href="#Use-Proxytunnel-on-M1-Mac" class="headerlink" title="Use Proxytunnel on M1 Mac"></a>Use Proxytunnel on M1 Mac</h1><p>When trying to connect from my M1 mac to the lab‚Äôs servers,I failed multiple times and had to use my old windows laptop to connect from WSL.</p><p>Our server requires a proxy jump for security reasons,so we use the following lines in the <code>ssh_config</code> file</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">Host hostname<br>    ProxyCommand proxytunnel -E -p hostname:port -d %h:%p<br></code></pre></div></td></tr></table></figure><p>To install <code>proxytunnel</code> on Mac,upon google ‚Äúproxytunnel mac‚Äù,the top 2 links will take us to <strong>Homebrew Formulae</strong>,which is a popular package manage on Mac.To install <code>proxytunnel</code>, the webpages suggest</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">brew install proxytunnel<br></code></pre></div></td></tr></table></figure><p>With successful installation with <code>brew</code>,when I try to ssh,the following error message appears</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">&gt; ssh me@hostname<br>Via hostname:port -&gt; hostname:22<br>Certificate verification failed (unable to get <span class="hljs-built_in">local</span> issuer certificate)<br>kex_exchange_identification: Connection closed by remote host<br>Connection closed by UNKNOWN port 65535<br></code></pre></div></td></tr></table></figure><p>I tried to solve this problem,but there is no discussion nor solution on the internet.I blamed this on the M1 chip, but I was wrong.</p><h2 id="How-to-fix"><a href="#How-to-fix" class="headerlink" title="How to fix"></a>How to fix</h2><p>It turns out,although <code>brew</code> said the install is successful,the dependence of <code>proxytunnel</code> is not complete.My current solution is to uninstall it from brew and reinstall with <strong>MacPorts</strong>.</p><p>If you have MacPorts installed, then</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">brew uninstall proxytunnel<br>sudo port install proxytunnel<br></code></pre></div></td></tr></table></figure><p>then <code>ssh</code> should be working with the same commands.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Modernity</title>
    <link href="/2022/10/12/modernity/"/>
    <url>/2022/10/12/modernity/</url>
    
    <content type="html"><![CDATA[<h1 id="Modernity"><a href="#Modernity" class="headerlink" title="Modernity?"></a>Modernity?</h1><p>from <em>Godzilla</em> and <em>Inside the Cable Temple</em>ÂÜÄË•øÂçóÊûóË∑ØË°å.</p><blockquote><p>Modernity was to be mourned as a loss of spiritual presenceand resisted by a missionary, evangelistic variety of Shinto.</p></blockquote><p>Shinto, by definition, is the way of the gods.The how do we define gods (from a non-religion point of view)?I often think a god is something that we used to fear and have limited knowledge to,like Godzilla or a huge mountain Â§™Ë°åÂ±±.</p><h3 id="The-Film-and-The-Album"><a href="#The-Film-and-The-Album" class="headerlink" title="The Film and The Album"></a>The Film and The Album</h3><iframe width="560" height="315" src="https://www.youtube.com/embed/nn-Wg1NU32I" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe style="border-radius:12px" src="https://open.spotify.com/embed/album/6ValxpcsrkQP2ugCU2Kxwy?utm_source=generator" width="100%" height="380" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe><h2 id="Godzilla-Steps-into-Modernity"><a href="#Godzilla-Steps-into-Modernity" class="headerlink" title="Godzilla Steps into Modernity"></a>Godzilla Steps into Modernity</h2><h3 id="Description-of-the-Scene"><a href="#Description-of-the-Scene" class="headerlink" title="Description of the Scene"></a>Description of the Scene</h3><p>The scene starts at 1:02 and ends around 1:03:30. It describes when Godzilla first comes ashore in the city, and a group of reporters tries to get a closer view of it and explain it verbally to the audience. From the beginning of the scene, a close-up is used to draw the audience‚Äôs attention to the head of Godzilla, establishing a monster-like horror feature as Godzilla‚Äôs characteristic. This close-up is followed by an eye-level medium shot of Godzilla destroying a bell tower and the reporter group running towards the site, which gives us a sense that we are witnessing a conflict between Godzilla and modern technology, namely a huge clock that makes sounds and television reports. Then the film presents a medium shot of the reporter reading scripts to the camera and describing the scene of Godzilla destroying the city. The next half minute is about the reporter describing the ongoing event to the audience ‚Äì not only the citizens in the film but also us watching the film ‚Äì from a media and perhaps political point of view. The director and the film writer point out one of the ideas behind the scenes, the confusion towards modernity, in the words of this reporter, ‚ÄúWill the world be destroyed by a two-million-year-old monster?‚Äù</p><h3 id="Cinematic-Technics"><a href="#Cinematic-Technics" class="headerlink" title="Cinematic Technics"></a>Cinematic Technics</h3><p>The first interesting technics used in the film is the interaction between the clock tower and Godzilla around 1:02:40. At 11 O‚Äôclock, the alarm goes off, which attracts Godzilla‚Äôs attention. As mentioned in the article Cinematism and Animetism, utilizing a paradigmatically modern example related to our experience of the world gives rise to a feeling of relatedness and immersive experience of the audience (Lamarre, 2013). The clock tower, also known as Wako, is not only an example of modern technology but also ‚Äúthe modernization industrial inheritance‚Äù of the Japanese people (ÂíåÂÖâ„Å®ÊôÇË®àÂ°î„ÅÆÊ≠¥Âè≤). This scene highlights a contrast between the ancient creature interrupted by modern technology, then destroyed after a second of hesitation. Furthermore, the film gives information about the current situation through a tv reporter as the media. By letting the audience of the film get information through media inside the film, this scene introduces another important critical topic: how the media is passed on through the media; overshadowing that latter, Dr. Serizawa decides to use the oxygen bomb after watching the news on his television.</p><h3 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h3><p>Mark Anderson mentions in his paper that ‚Äúscience and technology (including communications media) have transformed the Japanese social formation (Tsutsui and Ito, 2006).‚Äù In this scene selected from Godzilla, the media of message also plays a critical role in the public appearance of Godzilla. As shown in the film, the actual figure of Godzilla is only exposed to a limited amount of people, whereas the public gets to know Godzilla through the description of the reporter. The film shows a well-designed emergency radio broadcasting system to inform people to escape. At the same time, the film shows how the message system achieves psychological mobilization and civil defense against Godzilla and during the war (Tsutsui and Ito, 2006).</p><h3 id="Maybe-Another-Ending"><a href="#Maybe-Another-Ending" class="headerlink" title="Maybe Another Ending?"></a>Maybe Another Ending?</h3><p>If I could remake the film‚Äôs ending, I would further highlight the contradictions of modernity and how modernity could be overcome by further modernization. In this case, Godzilla would survive the Oxygen Destroyer but is in a coma and will be studied by the scientists led by Dr. Yamane. The research group funded by the army uses Godzilla‚Äôs body to build the defense of the country and the stairway to achieve the highest technology in the world. The scientists will build a new era of technology on Godzilla‚Äôs body flesh. Then, the country will start a new world war with the most advanced tech and weapons, which are powerful but cannot be fully controlled by a human. As a result, not only the country in the film, the human race will be eliminated by destructive weapons. Godzilla‚Äôs soul, who, of course, died from all the experiments on it, watches the consequences and the extinction of humans, then go back to the ocean and disappears.</p><p><strong>NOTE</strong> the idea of this section are from the album ÂÜÄË•øÂçóÊûóË∑ØË°å by relating/referring Godzilla to the Taihang Shan Â§™Ë°åÂ±±,especially on the song ÈááÁü≥.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>Lamarre, Thomas. The Anime Machine: A Media Theory of Animation. U of Minnesota Press, 2013.</p><p>Tsutsui, W., and M. Ito. In Godzilla‚Äôs Footsteps: Japanese Pop Culture Icons on the Global Stage. Springer, 2006.</p><p>ÂíåÂÖâ„Å®ÊôÇË®àÂ°î„ÅÆÊ≠¥Âè≤. <a href="https://www.wako.co.jp/clock_tower/">https://www.wako.co.jp/clock_tower/</a>. Accessed 23 Oct. 2022.</p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Music</tag>
      
      <tag>Popular Culture</tag>
      
      <tag>Rock</tag>
      
      <tag>Movie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grave of the Fireflies</title>
    <link href="/2022/10/11/Grave-of-the-Fireflies/"/>
    <url>/2022/10/11/Grave-of-the-Fireflies/</url>
    
    <content type="html"><![CDATA[<h1 id="Grave-of-the-Fireflies"><a href="#Grave-of-the-Fireflies" class="headerlink" title="Grave of the Fireflies"></a>Grave of the Fireflies</h1><blockquote><p>A disagreement caused by the different viewing points.</p></blockquote><p>If you do a search on any social media,there will be arguments, or perhaps disagreements, toward this film.However, the point of conflict is very distinct on the Chinese media (or ‚ÄúÁÆÄ‰∏≠‰∫íËÅîÁΩë‚Äù) and the else.Correspondingly, there are focused on whether the film‚Äôs main idea isanti-war v.s. ‚Äúanti-defeated‚Äù or who killed Setsuko (the litter sister).</p><p>To me, although these two arguments looks very different,their core reasoning are the same.In the context of this film (and many other where debates took place),the discussion is about how should Japanese talks about the history [1].After viewing the film, we all agree that the author characterized the main characters as victimunder such tragedy.The disagreement is always on ‚Äúwhat causes the tragedy?‚Äù</p><p>As Goldberg argues, and I agrees, that</p><blockquote><p>I argue that, while the film presents a realistic picture of suffering, it isalso critical of a blind patriotism that masks selfish impulses during the warand, afterward, of Japan‚Äôs inability to confront this past. Seita, who is not only the author‚Äôs doppelganger of guilt, is also a figure who expresses selfishnessmasked by nationalistic fervor. When he, like others in the film, acts inthe ‚Äúname‚Äù of communal ideals, he is really performing for personal gain orpleasure.the pursue of personal gain or pleasure over others is the main cause.The film continuously highlight this quality of Seita,when they move out from their aunt, never help with anything in the house, and selling from others, ‚Ä¶,which should be a clear indication that Seita symbolizes and represents <strong>nationalism</strong>.If the we can draw the conclusion that Seita‚Äôs actions contributes the most towards his sister‚Äôs death,then the cause of the tragedy should be clear.</p></blockquote><p>Another indication is that Seiko, though never join the Self-Defense Forces or the army,always wears a uniform.In fact, the uniform is one of the important things he run to get when running away from the fire at the beginning of the film.As Goldberg quotes from McVeigh,</p><blockquote><p>History was often invoked to account for why Japanesewore uniforms: ‚Äòthe uniform system‚Äô (seifuku seido) we see today is connectedto the wartime period. A sense of comradeship (nakama ishiki) and group consciousness(minzoku ishiki).The uniform in Japanese society,so often seen today in the sailor and military suits of schoolchildren, isa marker of group identity and solidarity. However, it is also a coded gesturein order to force these individual members to comply with that group‚Äôs standards.Uniforms represent the specified role of each individual,made visible to the Foucauldian panopticon. In Seita‚Äôs case, as the normalizinggaze is also his spirit‚Äôs gaze, his social role is as member of the fire brigade‚Äîafunction we never see him fulfill. As Grave was marketed as an educational experiencefor Japanese schoolchildren, who likewise would be wearing school‚Äúmilitary‚Äù uniforms, the message would be unmistakable. They are asked tosee themselves in Seita.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] Goldberg, Wendy. ‚ÄúTranscending the Victim‚Äôs History: Takahata Isao‚Äôs Grave of the Fireflies.‚Äù Mechademia, vol. 4, 2009, p. 39-52. Project MUSE, doi:10.1353/mec.0.0030.</p><h2 id="Something-Else"><a href="#Something-Else" class="headerlink" title="Something Else"></a>Something Else</h2><p>Watching this film and think about it and the discussion about it is highly recommended.</p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Popular Culture</tag>
      
      <tag>Anime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Akira</title>
    <link href="/2022/10/04/Akira/"/>
    <url>/2022/10/04/Akira/</url>
    
    <content type="html"><![CDATA[<h1 id="Akila"><a href="#Akila" class="headerlink" title="Akila"></a>Akila</h1><h2 id="Visual"><a href="#Visual" class="headerlink" title="Visual"></a>Visual</h2><p><strong>color</strong></p><ul><li>red: power<ul><li>red motorcycle</li><li>red cape</li></ul></li><li>blue<ul><li>hospital</li><li>the kids</li></ul></li></ul><p><strong>bike</strong> </p><ul><li>slide</li><li>back light</li></ul><p><strong>light</strong></p><ul><li>Building: various bright light (cyberpunk)</li><li>hospital: blue</li></ul><p><strong>Nostalgia</strong></p><ul><li>link between the current time scene and the past scene showed in the end</li></ul><h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h2><p><strong>signs</strong></p><p><strong>spoken</strong></p><ul><li>Tetsuo: I don‚Äôt need this piece of junk (Kaneda‚Äôs bike) anymore</li><li>It‚Äôs them or us</li><li>if ‚Ä¶ get the power, will them protect others or obsorbing everything around them</li><li>Akira never speaks, but the name shows its power</li></ul><h2 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h2><blockquote><p>sfx, music, voices, rhythm, cadence, sequences.</p></blockquote><p>The background music seems like some kind of </p><ul><li>traditional music, </li><li>acustic, </li><li>percuission</li><li>Pelog Selisir, Gamelan<ul><li><a href="https://www.youtube.com/watch?v=3Ku9iH2pU9g">https://www.youtube.com/watch?v=3Ku9iH2pU9g</a></li><li><a href="https://www.youtube.com/watch?v=GsPdTNGnr44">https://www.youtube.com/watch?v=GsPdTNGnr44</a></li></ul></li><li>A little Psychedelia, maybe some similarity in rhythm or just sound frequence<ul><li><a href="https://www.youtube.com/watch?v=qoX6AKuYWL8">Light My Fire</a></li><li><a href="https://www.youtube.com/watch?v=Nuxyhu89Gxc">The Sound of Wilderness</a></li><li><a href="https://www.youtube.com/watch?v=HsffxGyY4ck">Within you without you</a></li></ul></li></ul><p>One to highlight mysterious: dada tuo da (8min) </p><p>To make contrast between destruction/explosion: a peaceful sound</p><p>sound from inside v.s. sound from outside</p><ul><li><p>where does the sound came from?</p></li><li><p>where is Tetsuo?</p></li><li><p>Diegetic Sound ‚Äî from within the movie</p></li><li><p>Non-Diegetic Sound ‚Äî from outside the movie</p><ul><li>almost like tetuso is a higher power/force</li><li>music</li></ul></li></ul><p>chanting sound during the march</p><ul><li>forcing to go ons</li></ul><h2 id="Narrative-amp-Storyline"><a href="#Narrative-amp-Storyline" class="headerlink" title="Narrative &amp; Storyline."></a>Narrative &amp; Storyline.</h2><blockquote><p>think about narrative story line, is there one?</p></blockquote><p>The simplest one is Keneda trying to help Tesuto and rebuild their friendship.</p><blockquote><p>how is the medium the message? what does it actually do? think about how/what the media (sound) do to the story, narrative, story? who is Akira?</p></blockquote><p>Akira might be the medium of the story, carrying out the plot and underlying idea.Akira, as from the movie, could be the god, the world saver, a disease, nuclear power,or just a general form of power that gives privilege or superior to some people.</p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>manga</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Music Genre</title>
    <link href="/2022/06/12/MusicGenre/"/>
    <url>/2022/06/12/MusicGenre/</url>
    
    <content type="html"><![CDATA[<h1 id="Predicting-ROCK"><a href="#Predicting-ROCK" class="headerlink" title="Predicting ROCK!!"></a>Predicting ROCK!!</h1><p>Cover songs played an important in the history of Rock music. Some artists keep their cover songs close to the original version, while others alter the song to a great extent. Although some critics consider cover songs as less legitimate compared to original songs, covering a song brought out new insight and understanding of the music from a different perspective. As for Rock music, cover songs are considered a diffusion of the rock n roll rock aesthetics into other genres. High Hopes, the last song of the album The Division Bell by Pink Floyd, has been covered by artists in the various music genre. In this blog, we demonstrate and discuss the difference in the Pink Floyd version and the Nightwish cover version in terms of music and from a data science perspective.</p><h2 id="Music-Comparison"><a href="#Music-Comparison" class="headerlink" title="Music Comparison"></a>Music Comparison</h2><p>Different arrangements of the performance sometimes alter the meaning of the song and often appeal to different emotions. In the song High Hopes, the different utilization and arrangement of music elements contribute greatly to the meaning of their music. In the Pink Floyd version, the song is divided into two parts by the instrumental harmony (mainly guitar solo by David Gilmour) around the third minute. It is noticeable that both parts of the song are introduced with the cooperation of the piano and a bell (the Division Bell), giving the audience a calm and comfortable feeling. But at the same time, the ringing bell also keeps reminding the audience to keep in mind something. In this case, it represents the author‚Äôs thinking about the simple and beautiful past in comparison to the mysterious and complex current. This emotion is pushed to the climax by the guitar solo after each verse, leaving an endless aftertaste at the end of the Hawaiian Steel Guitar solo (also the end of the song).</p><p>Nightwish, on the other hand, replaced the piano and bell with a keyboard with synthesizers, which creates a sharper and thriller sound of the same rhythm created by the piano and the bell. Through each verse, Nightwish raises the audience‚Äôs emotion of questing and anger by guitar riff Marko Hietala‚Äôs high patch singing. Instead of sitting alone thinking about the past and current as described in David‚Äôs solo, Marko uses his voice to question the future, regardless of what the past is like. The Nightwish‚Äôs cover version is also notably faster than the Pink Floyd version, which provides more energy to the music, providing the power of their screaming to the future.</p><p>Although the music from these two bands is distinct, the same lyrics were fitted well. The lyrics of High Hopes focus on describing a place in the past and the feelings of revisiting the place. The music of the Pink Floyd version expresses a conflict between the current situation and the past and draws a picture wandering between these two periods. Nightwish uses the music to show their wish for the future based on the current and past described in the lyrics. Both bands bring out different perspectives of the lyrics with their different version of music.</p><h2 id="A-Comparison-Based-on-Data"><a href="#A-Comparison-Based-on-Data" class="headerlink" title="A Comparison Based on Data"></a>A Comparison Based on Data</h2><p>This experiment is based on the <a href="https://www.kaggle.com/code/andradaolteanu/work-w-audio-data-visualise-classify-recommend/">GTZAN</a> dataset, which contains a total of 1000 audio files in 10 different genres. The dataset also contains spectrogram images of every song as an image representation. In this experiment, we randomly shuffle the order of spectrograms of the songs, then divide the dataset into groups of 800, and 200 for train and test. The classifier model is composed of 5 convolution layers that can extract features from the spectrograms. We use the Cross-Entropy loss function and Adam to train the model. The model is trained for 100 epochs and get a 95% test accuracy.</p><p><img src="/images/bar2.png" alt="bar"></p><p>Due to the design of model design, the feature comparison is limited to 30-second audio clips. As a result, this experiment focuses on the clips of the introduction, the refrain (chorus), and the first guitar solo (note that Nightwish did not perform the ending solo). Surprisingly, the classifier gives a high probability of blues for both versions. In particular, the prediction on the introduction of Pink Floyd‚Äôs version, the chance is similar between metal, rock, and blues. In comparison, the Nightwish version introduction is considered more like pop, blues, or metal due to the rhythm played by the keyboard. The other music samples taken from both versions are considered blues or pop music. The Saliency maps also conform with the music analysis of the first part and the above prediction that the features in the introductions are distinct, but the singing and guitar solo are similar. It is also noticeable that the lower frequency part of both versions contributes more to the genre prediction by the model, as denoted by the darker color in the Saliency maps.</p><p><img src="/images/saliency2.png" alt="saliency"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>From both the music side and data side, we can see that although the audience considers two versions as rock and metal, the rhythm and arrangement are still close to blues. This prediction error is most likely contributed by the timber of the instruments, especially the level of distortion. To improve the results and get a clear observation, future studies may be done using larger datasets and viewing each song as a whole piece instead of taking 30-second samples.</p><p>The code used to train the model and get the results is available at <a href="https://github.com/EYH0602/MusicGenre">https://github.com/EYH0602/MusicGenre</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Music</tag>
      
      <tag>Computer Science</tag>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
      <tag>NLP</tag>
      
      <tag>Rock</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Relations Within the Matrix</title>
    <link href="/2022/03/31/MatFact/"/>
    <url>/2022/03/31/MatFact/</url>
    
    <content type="html"><![CDATA[<h1 id="On-Behalf-of-Matrices"><a href="#On-Behalf-of-Matrices" class="headerlink" title="On Behalf of Matrices"></a>On Behalf of Matrices</h1><p>Matrix Factorization methods are commonly used in machine learning related fields.The utilizations are various, in many different sub-fields.</p><p>The holy idea behind this is that the problems of slow computation and overfitting are huge in ML-related tasks,and if the data can be represented in a matrix,the major cause of these problems is the rank of the matrix.</p><div class="note note-primary">            <p>Note that in algebra, a matrix is a linear function (mapping).For a matrix $A \in \mathbb{R}^{m \times n}$, it has type signature$$A \in \mathbb{R}^{m \times n} : \mathbb{R}^{m \times \cdot} \rightarrow \mathbb{R}^{n \times \cdot}$$</p><p>And for any linear mapping $A$, the rank if this mapping is$$\mathrm{rank}(A) = \mathrm{dim}(\mathrm{img}(A))$$</p>          </div><p>Therefore, for a input matrix $M_1$,we want to find a matrix $M_2$ such that</p><ul><li>$M_2 \approx M_1$ and </li><li>$\mathrm{rank}(M_2) \ll \mathrm{rank}(M_1)$</li></ul><p>which is the idea of <em>low-rank approximation</em>.</p><p>That is, we want to reduce the rank as much as possible andkeep the information as complete as possible.How do we do this?</p><p>The first step is to know which information in the matrix is more important.Keeping the more important information and drop the others can achieve the above desire.As the names suggests,these values should be the eigenvectors and correlations between values in the matrix.</p><h2 id="Principle-Component-Analysis"><a href="#Principle-Component-Analysis" class="headerlink" title="Principle Component Analysis"></a>Principle Component Analysis</h2><p>PCA for short.If we have dataframes, or tables,we can find out the </p><p>From linear algebra,we can find the eigenvalues of a matrix</p><ul><li>For given matrix $A$, find the eigenvalues and eigenvectors of $A$</li><li>use the eigenvalues of $A$ to form a diagonal matrix $D$</li><li>concat the eigenvectors into one matrix $U$</li><li>reorder $D$ such that eigenvalues of $A$ are in decreasing order</li><li>reorder rows $U$ in same order as $D$</li><li>replace $U$ by taking first $s$ rows of $U$ where for given $s$</li><li>$W = UX$ is the desired matrix after dimension reduced</li></ul><p>in this case, $s$ is a parameter denoting the desired dimension.</p><div class="note note-primary">            <p>One can find that$$UAU^{-1} = D$$</p>          </div><div class="note note-primary">            <p>Also note that the given matrix $A$, if we are doing PCA on images, $A$ is the image itself.If we are doing ML on tabular data, $A$ is the covariance matrix of features in the table.</p>          </div><h2 id="Singular-Value-Decomposition"><a href="#Singular-Value-Decomposition" class="headerlink" title="Singular Value Decomposition"></a>Singular Value Decomposition</h2><p>The famous SVD.Idea behind SVD is very similar to $PCA$:Denote the original matrix with some matrix multiplication of $D$ and some other matrices,where we can use the order of eigenvalues to take first $n$ rows of these matricesto achieve <em>low-rank approximation</em>.Note that‚Äôs also why its called <em>decomposition</em>.Also, FYI that singular value is just the absolute value of eigenvalue.</p><p>In this case, the approximation for given $A$ would be$$A \approx UDV‚Äô$$which also can be written as$$A \approx WH$$where $W = UD^{0.5}$ and $H = D^{0.5}V‚Äô$.</p><p>Then the job left is to find $W$ and $H$ (well, to find $U$ and $V$).</p><p>There are different methods to find these two matrices.As doing machine learning,one clear approach is to do gradient descent.</p><p>Another notable way is Alternating Least Square, where the general idea is that</p><ul><li>random init $W$ as $W_0$</li><li>use $W_0$ to find $H_0$</li><li>use $H_0$ to find $W_1$</li><li>continue until convergence or asked to stop</li></ul><p>and the task here is to minimize $f(w, h)$ where$$f(w, h) = ||A - WH||_{F}^{2}$$with the Frobenius norm.</p><h2 id="Some-Application"><a href="#Some-Application" class="headerlink" title="Some Application"></a>Some Application</h2><p>In Recommender Systems,this methods are used for dimension reduction and matrix completion of the rating matrix.However, as its name suggested, ‚ÄúMatrix Factorization‚Äù methods works on all matrices.The completion of the rating matrix is not limited to these factorization method,other machine learning algorithms can also predict the values.</p><p>In Computer Vision, or other ml-related tasks, these methods has more applications.In <a href="https://papers.nips.cc/paper/2012/hash/c399862d3b9d6b76c8436e924a68c45b-Abstract.html">AlexNet</a>,PCA is used as a data augmentation method to alter the intensities of RGB channels of the image.SVD is also an import part of CV, dealing with image compression and image enhancement(well, the same as dimension reduction and matrix completion since images are matrices).</p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Science</tag>
      
      <tag>Linear Algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How Did I Failed RNN</title>
    <link href="/2022/03/26/RNN/"/>
    <url>/2022/03/26/RNN/</url>
    
    <content type="html"><![CDATA[<h1 id="Why-is-RNN-more-difficult-to-work-with-them-MLP-or-CNN"><a href="#Why-is-RNN-more-difficult-to-work-with-them-MLP-or-CNN" class="headerlink" title="Why is RNN more difficult to work with them MLP or CNN?"></a>Why is RNN more difficult to work with them MLP or CNN?</h1><p>This is, of course, an open question.But for me, the troubles are majorly caused by text embeddings.</p><p>The problem we encountered was to load the text embedded vector into the gRAM(both 6GB on my local GTX 1660Ti and gcloud 12GB Tesla K100).</p><p>The problem was fixed before the deadline with the utilization of <code>torchtext</code>.We did not change any of the tokenize methods,but used <code>BucketIterator</code> from <code>torchtext</code> to feed data into the networkinstead of batching the embeddings ourselves.</p><p>Without reading the implementation of <code>torchtext</code>,I‚Äôm guessing the package utilizes some kind of easy-loading technics.</p><p>For code example and how to use <code>torchtext.data</code>, checkout</p><ul><li><a href="https://github.com/EYH0602/ECS189G_DeepLearning/blob/fa309e6453f2b687cfb7e6d0f26006dc66bd346f/code/stage_4_code/Dataset_Loader.py">original implementation</a></li><li><a href="https://github.com/EYH0602/ECS189G_DeepLearning/blob/main/src/stage_4_code/Dataset_Loader.py">torchtext</a></li></ul><h1 id="Text-Generation"><a href="#Text-Generation" class="headerlink" title="Text Generation"></a>Text Generation</h1><p>Our model works, on some level.Following <a href="https://www.kdnuggets.com/2020/07/pytorch-lstm-text-generation-tutorial.html">this tutorial</a>,the model we build can be trained, but the jokes it generated are not understandable.</p><p><strong>ToDo</strong>analysis more on the LSTM on text generation task.</p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Science</tag>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Isomorphic of Composition</title>
    <link href="/2021/06/22/isomorphism/"/>
    <url>/2021/06/22/isomorphism/</url>
    
    <content type="html"><![CDATA[<h1 id="Isomorphic-of-Composition"><a href="#Isomorphic-of-Composition" class="headerlink" title="Isomorphic of Composition"></a>Isomorphic of Composition</h1><p>Are the composition of isomorphism still isomorphic?</p><p>Symmetric is one of the most ideal appearance of all structure, including mathematics.In math, isomorphism provides the symmetry between different mathematical structures.</p><p>Therefore, if the composition between isomorphism can keep to be isomorphic,we can compose morphism in arbitrary way while keeping the structure!</p><p>As defined in general algebra, if two structures $A$ and $B$ isomorphic,there exists a function/mapping $$\varphi : A \rightarrow B$$which is bijective and keeps the structure from $A$ to $B$.</p><p>As for category theory, let $\mathcal{C}_1$ and $\mathcal{C}_2$ be functors where</p><p>$$F : \mathcal{C}_1 \rightarrow \mathcal{C}_2, \ G : \mathcal{C}_2 \rightarrow \mathcal{C}_1$$</p><p>satisfies that</p><p>$$ FG = \mathrm{id}_{\mathcal{C}_2} $$</p><p>and</p><p>$$ GF = \mathrm{id}_{\mathcal{C}_1}. $$</p><!-- = \mathrm{id}_{\mathcal{C}}_{2}$$ --><p>we say that $F$ is a isomorphism between categories, and $G$ is its inverse.</p><p>We will solve the problem in two steps.</p><h2 id="If-composition-of-functions-is-isomorphic-so-are-this-functions"><a href="#If-composition-of-functions-is-isomorphic-so-are-this-functions" class="headerlink" title="If composition of functions is isomorphic, so are this functions."></a>If composition of functions is isomorphic, so are this functions.</h2><p>Let$$A \xrightarrow{f} B \xrightarrow{g} C \xrightarrow{h} D$$be arbitrary morphisms between categories.If $A \xrightarrow{gf} C$ and $B \xrightarrow{hg} D$ are isomorphic,then $f$, $g$, and $h$ are all isomorphic.</p><p><em>Proof</em>.Assume, for contraction, that$A \xrightarrow{gf} C$ and $B \xrightarrow{hg} D$ are isomorphisms but $g$ is not.Then either $g g^{-1} \neq \mathrm{id}_C$ or $g^{-1}g \neq \mathrm{id}_B$.</p><ol><li>If $gg^{-1} \neq \mathrm{id}_C$, then $f^{-1}g^{-1}gf \neq \mathrm{id}_A$.</li><li>If $g^{-1}g \neq \mathrm{id}_B$, note the commutative property of natural transformation,$g^{-1}h^{-1}hg \neq \mathrm{id}_B$.</li></ol><p>The step to show if $f$ or $h$ are not isomorphic then there is a contradictionbased on the commutative property of functors is similar.</p><p>Thus, we reach a contraction.Therefore if $A \xrightarrow{gf} C$ and $B \xrightarrow{hg} D$ are isomorphic,then $f$, $g$, and $h$ are all isomorphic.</p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Constants</title>
    <link href="/2021/06/06/Constants/"/>
    <url>/2021/06/06/Constants/</url>
    
    <content type="html"><![CDATA[<h1 id="What-should-we-add-a-constant-after-getting-the-Antiderivative-of-first-order-functions"><a href="#What-should-we-add-a-constant-after-getting-the-Antiderivative-of-first-order-functions" class="headerlink" title="What should we add a constant after getting the Antiderivative of first order functions?"></a>What should we add a constant after getting the Antiderivative of first order functions?</h1><p>Few days ago, I saw this question under <a href="https://www.zhihu.com/people/likeyong">@Phenomene Bizarre</a>‚Äòspost <a href="https://www.zhihu.com/question/54508642/answer/154155831">Â¶Ç‰ΩïÊ≠£Á°ÆÁêÜËß£Áæ§ËÆ∫‰∏≠ÁöÑÂêåÊÄÅÂü∫Êú¨ÂÆöÁêÜÔºü</a>.I thought this different approach to explain a simple question is really interesting.So here comes this blog.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>First we should clarify the question a little bit.As asked, when we try to find the antiderivative of a first order function $f$ with respect to variable $x$,$$\int f \ dx = F + c.$$why should we always add the constant $c$ at the end?</p><h2 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h2><p><strong>Definition</strong>. $C^1(\mathbb{R})$ is the set of first order continuously differentiable functions on $\mathbb{R}$.</p><h2 id="An-Algebraic-Approach"><a href="#An-Algebraic-Approach" class="headerlink" title="An Algebraic Approach"></a>An Algebraic Approach</h2><p>To talk about antiderivative, we should first understand the definition of <strong>derivative</strong>.As defined, derivative of a function in this case is epimorphism mapping from $C^1(\mathbb{R})$ to $C^0(\mathbb{R})$,$$D := \frac{d}{dx} : C^1(\mathbb{R}) \rightarrow C^0(\mathbb{R}).$$</p><p>That is, if a function $f$ nis integrable, then it must be in the image of the above function,$$f \text{ is integrable} \iff f \in \mathrm{im} D.$$</p><p>Since $D$ is an epimorphism, by the First Isomorphism Theorem,there exists an unique isomorphism$$\phi : C^1(\mathbb{R}) \big/ \ker D \rightarrow \mathrm{im}D$$where $C^1(\mathbb{R}) \big/ \ker D$ is the quotient space of $C^1(\mathbb{R})$.</p><p>Since isomorphism is bijective, there exists an inverse function of $\phi$$$\phi^{-1} : \mathrm{im}D \rightarrow C^1(\mathbb{R}) \big/ \ker D$$that maps form the image of function $D$ to the quotient space,which as we know is the <strong>antiderivative function</strong>.Then it is clear that the antiderivative of $f$, $F \in C^1(\mathbb{R}) \big/ \ker D$.</p><p>Since $\ker D$ is a normal subgroup to $C^1(\mathbb{R})$,by <a href="https://en.wikipedia.org/wiki/Quotient_group">definition of quotient group</a>,$C^1(\mathbb{R}) \big/ \ker D$ is the set of all <a href="https://en.wikipedia.org/wiki/Coset">left cosets</a>of $\ker D$ in $C^1(\mathbb{R})$.That is,$$C^1(\mathbb{R}) \big/ \ker D = \{ a + \ker D: a \in C^1(\mathbb{R}) \}.$$</p><div class="note note-secondary">            <p>Here we say it is $a + N$ because $+$ is the binary operation defined on $C^1(\mathbb{R})$.</p>          </div><p>Then what is the kernel of function $D$?By <a href="https://en.wikipedia.org/wiki/Kernel_(algebra)">definition</a>,the kernel of a morphism is the set of all elements from the domain mapped to the identity element in image.In this case, since the identity of $+$ on $\mathbb{R}$ is $0$,$$\ker D = \{a : a \in C^1(\mathbb{R}) \land a \mapsto 0 \} \subseteq \mathbb{Z}.$$</p><p>Therefore, we should add the constant when finding antiderivative or indefinite integral.</p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
      <tag>calculus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object Oriented Mathematics !?</title>
    <link href="/2021/03/26/ObjectMath/"/>
    <url>/2021/03/26/ObjectMath/</url>
    
    <content type="html"><![CDATA[<h1 id="Mathematical-Structure"><a href="#Mathematical-Structure" class="headerlink" title="Mathematical Structure"></a>Mathematical Structure</h1><div class="note note-success">            <p>This post is a quick introduction to basic Modern Algebra and Category Theory.I think these concepts will help the understanding of <code>fold</code> function, Monoid, and Monad.If you are not interested or feel not necessary,feel free to skip this post.<code>fold</code> function, Monoid, and Monad can be understood without these math background.</p>          </div><p>We often heard the concept of ‚ÄúData Structure‚Äù,which is how data is store and loaded in the memory.Data Structures are something actually exists in the memory,but math is the abstract language people created to describe the world.</p><p>How does math have structure?</p><div class="note note-secondary">            <p>Come to think about this,isn‚Äôt Math a functional language?</p>          </div><p>Recall that we mentioned the structure of set in post <a href="/2021/03/19/Function/index.html">Think about Functions</a>.We said a set can have some structure: open, closed, compact, connected ‚Ä¶and continuous functions preserves the structure of a set.</p><p>Other than this,what are the more general mathematical structures?</p><h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p><strong>Definition:</strong>A set $G$ with a <em>binary operation</em> $*$ defined on it is called a <strong>group</strong> if</p><ul><li>the binary operation is associative,</li><li>the binary operation has a identity element in the set,</li><li>the binary operation provides an inverse for every element of $G$.</li></ul><p>This group can be denoted $(G, *)$.</p><p>We can describe the definition in mathematical language.This is, $(G, *)$ is a group if</p><ul><li>$\forall a,b,c \in G$, $(a * b) * c = a * (b * c)$.</li><li>$\exists \mathbb{1} \in G$ such that $\forall a \in G$, $\mathbb{1} * a = a * \mathbb{1} = a$.</li><li>$\forall a \in G$, $\exists a^{-1} \in G$ such that $a * a^{-1} = a^{-1} * a = \mathbb{1}$.</li></ul><p>Let‚Äôs look at some examples.</p><p>$(\mathbb{R}, +)$ is a group.</p><ul><li>associativity is trivial.</li><li>Since forall $a \in \mathbb{R}$, $a + 0 = 0 + a = a$, the identity is $0$.</li><li>For all $a \in \mathbb{R}$, there exists $-a \in \mathbb{R}$ such that $a + (-a) = (-a) + a = 0$.</li></ul><p><strong>Definition:</strong> General Linear Group $GL_n(\mathbb{R})$ is set of matrix in matrix space $\mathbb{R}^n$ whose determinate is not 0.$$ GL_n(\mathbb{R}) = \{ A \in \mathcal{M}_n(\mathbb{R}) | \det A \neq 0 \}. $$And the binary operation for linear groups are <em>matrix multiplication</em>.</p><p>As it is called, $GL_2(\mathbb{R})$ is a group under matrix multiplication since</p><ul><li>matrix multiplication is associative </li><li>identity is the ‚Äúidentity matrix‚Äù $ \begin{bmatrix} 1 &amp; 0 \\ 0 &amp; 1 \end{bmatrix} $.</li><li>Let $A = \begin{bmatrix} a &amp; b \\ c &amp; d \end{bmatrix} \in GL_2(\mathbb{R})$,  then its identity is  $$ A^{-1} = \frac{1}{ad - bc} \begin{bmatrix} -a &amp; c \\ b &amp; -d \end{bmatrix}. $$  $A^{-1} \in GL_2(\mathbb{R})$ because $$ \det A^{-1} = \frac{1}{\det A} \neq 0. $$</li></ul><div class="note note-secondary">            <p>Recall in the post on functions, we said $n \times n$ matrix are functions.This this is a group of functions!</p>          </div><p>In post <a href="/2021/03/19/Function/index.html">Think about Functions</a>,we introduced functions acting on a pentagon.That is,</p><ul><li>$x$ rotate the polygon by $2\pi/n$ around its center.</li><li>$y$ rotate the polygon by $\pi$ about vertical.</li></ul><p>And we get the following set of actions$$ A_5 =  \{ \mathbb{1}, x, x^2, x^3, x^4, y, xy, x^2y, x^3y, x^4y \} $$which is a group defined under function composition.</p><p>In fact, this group is called the <strong>alternating group</strong> order 5.The same action $x$ and $y$ can be performed on any $n$-side right polygon,and get an alternating group of order $n$.</p><p>Why is this mathematical structure, group, important?The reasons are <em>closure</em> and <em>symmetry</em>.With these two properties,we can compose functions freely.</p><p><strong>Theorem.</strong>Let $(G, *)$ be group,then set $G$ is closed under the binary operation $*$.That is, $\forall a, b \in G$, $a * b = c \in G$.</p><div class="note note-secondary">            <p>You can try to prove this property for the examples we give in the beginning.</p>          </div><p>With closure, we have the freedom to compose functions in the same group.And the result function of compose will always be in the same group.This lead us to another hot topic of modern computer science: <strong>Domain Specific Programming</strong>.</p><p>Think about this,we have some different parts of a project,</p><ul><li>some of them are for backend, written in Haskell, F#, Rust, or others ‚Ä¶</li><li>Database and SQL scripts,</li><li>frontend programs written in JS, TS ‚Ä¶</li></ul><p>The functions are written in different languages,serving as different parts,but if all of them follows the same standard (domain),we can compose these functions!How wonderful is that.</p><h2 id="Monoid"><a href="#Monoid" class="headerlink" title="Monoid"></a>Monoid</h2><p>Making a set of functions that forms a group under function composition seems like a bright future,but there is some issue of that.Unlike mathematics,it‚Äôs really hard to find the inverse for functions in programs.Therefore, we want to leave that part out in our definition of mathematical structure.</p><p><strong>Definition:</strong>A <strong>monoid</strong> is a set and a function/mapping defined on that such that</p><ul><li>the function is associative on that set,</li><li>the function has an identity element.</li></ul><p>That is,a monoid is just a group that may or may not have inverse for all elements.</p><p>In this way,it is easily for our functions (as programs) to form a monoid.</p><p><strong>Theorem.</strong>If a set $M$ is a monoid under binary operation $<em>$,then $M$ is closed under $</em>$.</p><div class="note note-secondary">            <p>Monoid also have the closure property.Guess which two requirements of group provides closure?</p>          </div><h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>If you are a math major,you have probably notice that there are similar structures in different of math.</p><p>For example, group and metric spaces are very similar in that way thatboth of them are a set (sequence) of some objects and a function defined on them.</p><p>Since math is all about abstraction,we want to a structure to represent all structures of the same pattern.</p><div class="note note-secondary">            <p>That sounds like a Java abstract class.</p>          </div><p><strong>Definition:</strong>A <strong>category</strong> consists of two things:</p><ul><li>objects, i.e. the elements in the set.</li><li>morphism, a fancy way to say function, need to be composable.</li></ul><p>If you think about this, <em>catagories</em> are all around us.For example, as we defined before, $(\mathbb{R}, +)$ is a category where</p><ul><li>object: real number,</li><li>morphism: $+$.</li></ul><p>Group:</p><ul><li>object: elements of the set</li><li>morphism: binary operation defined on it.</li></ul><p>Monoid:</p><ul><li>object: elements of the set</li><li>morphism: binary operation defined on it.</li></ul><p>Vector space,</p><ul><li>object: vector</li><li>morphism: scalar product</li></ul><p>Metric space:</p><ul><li>object: elements of the sequence</li><li>morphism: the continuous function defined on it.</li></ul><p>Linked List:</p><ul><li>object: node</li><li>morphism: <code>next</code></li></ul><p>Tree/Group:</p><ul><li>object: node</li><li>morphism: path</li></ul><p>Bushiness Plan:</p><ul><li>object: state/revenue</li><li>morphism: action.</li></ul><p>‚Ä¶</p><p>In theory,anything in any subject can be defined as category,as long as we can find its <strong>objects</strong> and define a morphism between them.That is what I mean by ‚ÄúObject Oriented Mathematics‚Äù.</p><h3 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h3><p><strong>Definition:</strong>A morphism mapping a category to another category is called a <strong>functor</strong>.</p><p>As we said, functions can map anything.So the mapping between catagories should be no surprise.In fact, we have already seen some functor.</p><p>Recall the <u> general linear group </u> $GL_N\mathbb{R}$,$GL_N$ is just a function that maps a vector space (a catagories) to a group (another category).</p><p><code>Maybe</code> we introduced in <a href="/2021/03/24/Maybe/index.html">Maybe Another Way of Error Handling ‚Ä¶</a>is also a functor.<code>Maybe</code> maps a category of arbitrary type to a category of the same type that can can have error.For example, we defined a type <code>Maybe Double</code>, which is a category of <code>Double</code> with errors.Moreover,in Haskell, we call the functor <code>Maybe</code> as the <strong>Maybe Monad</strong>.</p><p><strong>Definition:</strong>A <strong>monad</strong> is a functor on monoids.</p><p>In functional programming,monad is often used to handle operation that will have side-effect.</p><p>Since a language with no side-effect is useless,but side-effects are not safe and may cause programs,Monad is the solution to handle side-effects in a controllable level.</p><p>Therefore, in Haskell, we have some predefined useful monads</p><ul><li><code>Maybe</code> monad</li><li><code>IO</code> monad</li><li>‚Ä¶</li></ul><h3 id="Monadic-Map"><a href="#Monadic-Map" class="headerlink" title="Monadic Map"></a>Monadic Map</h3><p>The whole idea of functional programming is function composition.</p><p>However, with monad involved,we get a problem (as last time we try to compose with <code>Maybe</code> monad).</p><p>Consider two general functions, </p><ul><li>$f : B \rightarrow C$,</li><li>$g : A \rightarrow B$.</li></ul><p>Then there is a function $h = f \circ g$ as the composition of $f$ and $g$ such that$$ h : A \rightarrow C. $$</p><p>But now with monad $M$, type of our two functions becomes</p><ul><li>$f : B \rightarrow MC$,</li><li>$g : A \rightarrow MB$.</li></ul><p>Then the types of two functions do not line up.$f$ returns a $MB$ type, but $g$ takes a $B$ type,so we cannot compose $f$ and $g$.</p><p>Recall in <a href="/2021/03/24/Maybe/index.html">Maybe Another Way of Error Handling ‚Ä¶</a>je use <code>&gt;&gt;=</code> the bind operator to solve this problem.How does this work?</p><p>As defined, a monad is a functor, which is a mapping.Consider the mapping$$\begin{matrix}    &amp; &amp; A &amp; \rightarrow &amp; MA \\    &amp; &amp; \downarrow &amp; \swarrow &amp; \downarrow \\    B &amp; \rightarrow &amp; MB &amp; \leftarrow &amp; MMB \\    \downarrow &amp; \swarrow &amp; \downarrow &amp; &amp; \\    MC &amp; \leftarrow &amp; MMC &amp; &amp; \end{matrix}$$</p><p>this map is called the <strong>monadic map</strong>,which is how <code>&gt;&gt;=</code> compose two monadic functions.</p><div class="note note-secondary">            <p>Can ypu tell how <code>&gt;&gt;=</code> compose two monadic functions?</p>          </div><p>Back to the question we propose in <a href="/2021/03/24/Maybe/index.html">Maybe Another Way of Error Handling ‚Ä¶</a></p><div class="note note-secondary">            <p>We said <code>&gt;&gt;=</code> is a composition operator,but why it does not take two functions?</p>          </div><p>We said binary operator should be symmetric,but <code>&gt;&gt;=</code> is not.The current <code>&gt;&gt;=</code> works as</p><p>Let‚Äôs redefine $f$ and $g$ in Haskell code since <code>&gt;&gt;=</code> is a Haskell operator.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">g</span> :: a -&gt; <span class="hljs-type">M</span> b<br><span class="hljs-title">f</span> :: b -&gt; <span class="hljs-type">M</span> c<br></code></pre></div></td></tr></table></figure><p>Then the definition of <code>&gt;&gt;=</code> is</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(&gt;&gt;=) :: <span class="hljs-type">Monad</span> m =&gt; m a -&gt; (a -&gt; m b) -&gt; m b<br></code></pre></div></td></tr></table></figure><p>and we use it as</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">M</span> b &gt;&gt;= (b -&gt; <span class="hljs-type">M</span> c)<br></code></pre></div></td></tr></table></figure><p>which returns a <code>M c</code>.</p><p>But our goal is to compose a function that maps <code>a -&gt; Mc</code>,whereas our bind function is not taking an <code>a</code> as input.</p><p>Consider this way, the type signature indicates that <code>&gt;&gt;=</code> works as</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(ga) &gt;&gt;= \b -&gt; (fb)<br></code></pre></div></td></tr></table></figure><p>But if we make the expression an lambda expression,i.e. add lambda to left,it becomes </p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">\a -&gt; [(ga) &gt;&gt;= \b -&gt; (fb)]<br>\a -&gt; (ga) &gt;&gt;= \b -&gt; (fb)<br></code></pre></div></td></tr></table></figure><p>then <code>&gt;&gt;=</code> is actually symmetric as our normal composition operator:takes two functions</p><ul><li><code>g :: a -&gt; M b</code></li><li><code>f :: b -&gt; M c</code></li></ul><p>and returns a function <code>h :: a -&gt; M c</code>.</p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
      <tag>HackerHub</tag>
      
      <tag>Haskell</tag>
      
      <tag>programming</tag>
      
      <tag>functional</tag>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maybe Another Way of Error Handling ...</title>
    <link href="/2021/03/24/Maybe/"/>
    <url>/2021/03/24/Maybe/</url>
    
    <content type="html"><![CDATA[<h1 id="Errors"><a href="#Errors" class="headerlink" title="Errors!"></a>Errors!</h1><p>Throw exceptions!</p><p>That seems simple,but is it?Let‚Äôs define a simple function with some boundary conditions.For example, division is undefined if the denominator is 0.</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">// calculate a/b</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">safeDiv</span><span class="hljs-params">(<span class="hljs-keyword">double</span> a, <span class="hljs-keyword">double</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0.0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> runtime_error(<span class="hljs-string">&quot;Exception: Denominator Cannot be 0.&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> a / b;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>What‚Äôs wrong with this function?At the very first line,we defined <code>safeDiv</code> as a mapping take takes two <code>double</code> and returns a <code>double</code>.But when the function throw a runtime error,does it return a <code>double</code>?Then, out function header is lying to us!</p><p>As a careful programmer,we always want out function to be honest.In a program, the type of a function should indicate what the function does.</p><h2 id="Maybe-it-Returns-a-‚Ä¶"><a href="#Maybe-it-Returns-a-‚Ä¶" class="headerlink" title="Maybe it Returns a ‚Ä¶"></a>Maybe it Returns a ‚Ä¶</h2><p>Let‚Äôs stay on the example of <code>safeDiv</code>.Since the denominator cannot be 0if we get a 0 for the denominator but cannot throw an exception,what should we do?In this case, the return value cannot be a <code>double</code> neither.</p><p>Actually,we say the safe division maybe returns a double, or nothing.</p><ul><li>if the denominator is 0, <code>safeDiv</code> returns Nothing,</li><li>otherwise, it returns just the division.</li></ul><p>That is,</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">safeDiv</span> :: <span class="hljs-type">Double</span> -&gt; <span class="hljs-type">Double</span> -&gt; <span class="hljs-type">Maybe</span> <span class="hljs-type">Double</span><br><span class="hljs-title">safeDiv</span> _ <span class="hljs-number">0</span> = <span class="hljs-type">Nothing</span><br><span class="hljs-title">safeDiv</span> a b = <span class="hljs-type">Just</span> (a / b)<br></code></pre></div></td></tr></table></figure><p>it returns</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">*<span class="hljs-type">Main</span>&gt; safeDiv <span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-type">Just</span> <span class="hljs-number">0.25</span><br>*<span class="hljs-type">Main</span>&gt; safeDiv <span class="hljs-number">3</span> <span class="hljs-number">0</span><br><span class="hljs-type">Nothing</span><br></code></pre></div></td></tr></table></figure><p>which is exactly what the type signature tells us!</p><p>This idea words on more generic function too.For example,when we want the head of an empty list,there would be an error</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; head []<br>*** <span class="hljs-type">Exception</span>: <span class="hljs-type">Prelude</span>.head: empty list<br></code></pre></div></td></tr></table></figure><p>We can define a <code>safeHead</code> function to solve this problem,</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">safeHead</span> :: [a] -&gt; <span class="hljs-type">Maybe</span> a<br><span class="hljs-title">safeHead</span> [] = <span class="hljs-type">Nothing</span><br><span class="hljs-title">safeHead</span> (x : _) = <span class="hljs-type">Just</span> x<br></code></pre></div></td></tr></table></figure><p>our we can just use the Prelude <code>head</code></p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">safeHead</span> :: [a] -&gt; <span class="hljs-type">Maybe</span> a<br><span class="hljs-title">safeHead</span> [] = <span class="hljs-type">Nothing</span><br><span class="hljs-title">safeHead</span> xs = <span class="hljs-type">Just</span> (head xs)<br></code></pre></div></td></tr></table></figure><p>this will give us </p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">*<span class="hljs-type">Main</span>&gt; safeHead [<span class="hljs-number">1.</span><span class="hljs-number">.5</span>]<br><span class="hljs-type">Just</span> <span class="hljs-number">1</span><br>*<span class="hljs-type">Main</span>&gt; safeHead []<br><span class="hljs-type">Nothing</span><br></code></pre></div></td></tr></table></figure><h2 id="Composition-with-Error"><a href="#Composition-with-Error" class="headerlink" title="Composition with Error"></a>Composition with Error</h2><p>Function composition is the highest call in functional programming.For example, if we want to convert a division result to string</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">*<span class="hljs-type">Main</span>&gt; show (<span class="hljs-number">5</span>/<span class="hljs-number">3</span>)<br><span class="hljs-string">&quot;1.6666666666666667&quot;</span><br>*<span class="hljs-type">Main</span>&gt; show (<span class="hljs-number">5</span>/<span class="hljs-number">0</span>)<br><span class="hljs-string">&quot;Infinity&quot;</span><br></code></pre></div></td></tr></table></figure><p>The type signature of <code>show</code> is</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">show</span> :: <span class="hljs-type">Show</span> a =&gt; a -&gt; <span class="hljs-type">String</span><br></code></pre></div></td></tr></table></figure><p>and if we compose it with <code>show</code> with our <code>safeDiv</code></p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">*<span class="hljs-type">Main</span>&gt; show $ safeDiv <span class="hljs-number">5</span> <span class="hljs-number">0</span><br><span class="hljs-string">&quot;Nothing&quot;</span><br>*<span class="hljs-type">Main</span>&gt; show $ safeDiv <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-string">&quot;Just 1.6666666666666667&quot;</span><br></code></pre></div></td></tr></table></figure><p>we will need another parser to extract the division result.</p><p>In a simple way,we may define a <code>safeShow</code> to solve this problem.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">safeShow</span> :: <span class="hljs-type">Maybe</span> <span class="hljs-type">Double</span> -&gt; <span class="hljs-type">String</span><br><span class="hljs-title">safeShow</span> <span class="hljs-type">Nothing</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-title">safeShow</span> (<span class="hljs-type">Just</span> a) = show a<br></code></pre></div></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">*Main&gt; safeShow <span class="hljs-variable">$ </span>safeDiv <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-string">&quot;1.6666666666666667&quot;</span><br>*Main&gt; safeShow <span class="hljs-variable">$ </span>safeDiv <span class="hljs-number">5</span> 0<br><span class="hljs-string">&quot;&quot;</span><br></code></pre></div></td></tr></table></figure><p>But our <code>safeShow</code> only handles the <code>Maybe Double</code> type.We cannot compose it with other type functions,which contradicts the idea of function reusability.</p><p>Ideally, we want to keep <code>show</code>‚Äòs generic type in our <code>safeShow</code>,while extracting the result easily and quickly.</p><p>To solve these two problems, we may define <code>safeShow</code> as</p><ul><li>if <code>safeShow</code> receives nothing, it returns nothing</li><li>otherwise it returns just the <code>show</code> of the value</li></ul><p>We introduce the <code>&gt;&gt;=</code> bind operator.Let‚Äôs see how it works.First, we can define the <code>safeShow</code> as we want:it takes any showable type and the return type maybe is string.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">safeShow</span> :: <span class="hljs-type">Show</span> a =&gt; a -&gt; <span class="hljs-type">Maybe</span> <span class="hljs-type">String</span><br><span class="hljs-title">safeShow</span> = <span class="hljs-type">Just</span> . show<br></code></pre></div></td></tr></table></figure><p>Then we can try in <code>ghci</code></p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">*<span class="hljs-type">Main</span>&gt; safeDiv <span class="hljs-number">5</span> <span class="hljs-number">1</span> &gt;&gt;= safeShow<br><span class="hljs-type">Just</span> <span class="hljs-string">&quot;5.0&quot;</span><br>*<span class="hljs-type">Main</span>&gt; safeDiv <span class="hljs-number">5</span> <span class="hljs-number">0</span> &gt;&gt;= safeShow<br><span class="hljs-type">Nothing</span><br>*<span class="hljs-type">Main</span>&gt; safeHead [<span class="hljs-number">1.</span><span class="hljs-number">.5</span>] &gt;&gt;= safeShow<br><span class="hljs-type">Just</span> <span class="hljs-string">&quot;1&quot;</span><br>*<span class="hljs-type">Main</span>&gt; safeHead [] &gt;&gt;= safeShow<br><span class="hljs-type">Nothing</span><br></code></pre></div></td></tr></table></figure><p><code>&gt;&gt;=</code> is the composition operator of functions that return a Maybe type!What‚Äôs its type in this case?</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(&gt;&gt;=) :: <span class="hljs-type">Maybe</span> a -&gt; (a -&gt; <span class="hljs-type">Maybe</span> b) -&gt; <span class="hljs-type">Maybe</span> b<br></code></pre></div></td></tr></table></figure><p>This function takes two inputs</p><ul><li><code>Maybe a</code> as the output of our other <code>safe*</code> functions;</li><li>a function that map <code>a</code> to <code>Maybe b</code> type.</li></ul><div class="note note-secondary">            <p>The actual type of <code>&gt;&gt;=</code> is</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(&gt;&gt;=) :: <span class="hljs-type">Monad</span> m =&gt; m a -&gt; (a -&gt; m b) -&gt; m b<br></code></pre></div></td></tr></table></figure><p>You may wonder what is <code>Monad m</code>, and as mentioned before in type signature of <code>show</code>, <code>Show a</code>.We said <code>Show a</code> means ‚Äúshowable‚Äù type.In fact, the keywords <code>Monad</code> and <code>Show</code> are type class.Visit blog post <a href="">‚ÄúTypes! What are They?‚Äù</a>.</p>          </div><div class="note note-secondary">            <p>We said <code>&gt;&gt;=</code> is a composition operator,but why it does not take two functions?If you are interested in that,visit blog post <a href="">‚ÄúObject Oriented Mathematics !?‚Äù</a>.</p>          </div><div class="note note-info">            <p>For more information,visit <a href="http://learnyouahaskell.com/a-fistful-of-monads">A Fistful of Monads</a>.</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
      <tag>HackerHub</tag>
      
      <tag>Haskell</tag>
      
      <tag>programming</tag>
      
      <tag>functional</tag>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How does lambda build up the world?</title>
    <link href="/2021/03/21/Lambda2/"/>
    <url>/2021/03/21/Lambda2/</url>
    
    <content type="html"><![CDATA[<h1 id="Everything-is-Function"><a href="#Everything-is-Function" class="headerlink" title="Everything is Function"></a>Everything is Function</h1><p>In pure math,there is no transistors,so we cannot build any gates and storage media.For such tasks,we introduce the <strong>Church Encoding</strong>.</p><h2 id="Boolean-Algebra-Revisit"><a href="#Boolean-Algebra-Revisit" class="headerlink" title="Boolean Algebra Revisit"></a>Boolean Algebra Revisit</h2><p>Boolean is a value that is either true or false.Algebra somehow means functions.Are Boolean functions?</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">bool</span> condition;<br><span class="hljs-keyword">int</span> a = (condition) ? val1 : val2;<br></code></pre></div></td></tr></table></figure><p>This syntax is supported in most programming languages.That is, we use the boolean condition to <em>select</em> between two values.If the condition is true, we select <code>val1</code>,otherwise we select <code>val2</code>.</p><p>Let‚Äôs write functions that do these things.Let function true as $T$ takes choose the first among its two inputs,$$ T = \lambda ab. a = K $$then it‚Äôs just the Kestrel defined in last post!Then define false as $F$ which returns the second input,$$ F = \lambda ab.b = KI $$which is the Kite.</p><p>Now the question is about the other boolean logics.The first and the most important is <strong>negation</strong>,the <code>!</code> in most programming languages.Come to think about this,the function $\mathrm{Not}$ takes one boolean input and return the negation of it.That is,</p><ul><li>if the input is true (select the first), we return false;</li><li>if the input is false (select the second), we return true.</li></ul><p>Then we can define$$ \mathrm{Not} = \lambda p. pFT $$and if we express the idea of $N$ verbosely$$\begin{align}    \mathrm{Not}\ T &amp; = F \leftrightarrow \lambda (\lambda ab.a) . (\lambda ba.a) \\    \mathrm{Not}\ F &amp; = T \leftrightarrow \lambda (\lambda ba.a) . (\lambda ab.a)\end{align}$$we can see $Not$ is doing reverse application!Negation is just the Cardinal!</p><p>To find the $\mathrm{And}$ function, we can look at the truth table of and first</p><table><thead><tr><th align="center">$x$</th><th align="center">$y$</th><th align="center">$\mathrm{And}\ x y$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>There are two cases:</p><ul><li>If $x$ is true, then $\mathrm{And}\ xy = y$;</li><li>If $x$ is false, then $\mathrm{And}\ xy = F$.</li></ul><p>Therefore, the $\mathrm{And}$ may involve some function that choose between two inputs.Recall that $T$ and $F$ are the two functions choosing between inputs!And $T$ and $F$ are the possible candidates of $\mathrm{And}$!Let$$ \mathrm{And} = \lambda xy. xyF $$then $\mathrm{And}$ satisfies the description above.</p><div class="note note-primary">            <p>Think about the case when $x$ is false, can we have another definition of $\mathrm{And}$?</p>          </div><table><thead><tr><th align="center">$x$</th><th align="center">$y$</th><th align="center">$\mathrm{Or}\ x y$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>$\mathrm{Or}$ is very similar to $\mathrm{And}$.</p><ul><li>If $x$ is true, then $\mathrm{Or}\ xy = T$;</li><li>If $x$ is false, then $\mathrm{Or}\ xy = y$.</li></ul><p>Then we can give the $\mathrm{Or}$ function$$ \mathrm{Or} = \lambda xy. xTy $$</p><div class="note note-primary">            <p>Like $\mathrm{And}$, is there another way to define $\mathrm{Or}$?</p>          </div><table><thead><tr><th align="center">$x$</th><th align="center">$y$</th><th align="center">$\mathrm{Xor}\ x y$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">F</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">F</td></tr></tbody></table><p>As the definition of xor,when two inputs are the same, it returns true;otherwise it‚Äôs false.</p><ul><li>If $x$ is true, then $\mathrm{Xor}\ xy = \mathrm{Not}\ y$;</li><li>If $x$ is false, then $\mathrm{Xor}\ xy = y$.</li></ul><p>$$ \mathrm{Xor} = \lambda xy. x\ (\mathrm{Not}\ y) y $$This also the $\neq$ operator.</p><p>In conclusion, when defining binary boolean functions,we use the first input as a selector.</p><div class="note note-primary">            <p>How to define $\equiv$ the <code>beq</code> operator using lambda calculus?</p>          </div><h2 id="Numerals"><a href="#Numerals" class="headerlink" title="Numerals"></a>Numerals</h2><p>For any language to be useful in programming,it needs numbers.But lambda calculus is just a notation system of function,There is no register nor memory,how can we have number in such a system?As part of Churching Encoding,we can use function to define number system using functions.</p><p>The key idea is let the number represent function application,for example, $1$ is just apply some function once,$$ \mathcal{1} = \lambda fx. fx $$Then $2$ is just$$ \mathcal{2} = \lambda fx. f(fx) $$and so one.Then what is zero $0$,a function that takes two input and just return the second onewithout doing anything.$$ \mathcal{0} = \lambda fx. x = KI = F $$which is just the Kite!In this way, 0 in lambda calculus also means false.</p><p>How do we define all the natural numbers?It seems impossible to write definitions like this forever.Recall the Peano axioms,especially the definition of <strong>Peano numbers</strong>.</p><p><strong>Peano Axiom</strong>(first two):</p><ol><li>0 is a natural number.</li><li>For every natural $n$, its successor $n++$ is also a natural number (closure).</li></ol><p>The key to define all natural numbers and addition is the <strong>successor</strong>,let $\mathrm{Succ} n$ denote the successor of $n$.</p><p>As the axiom says,$$ \begin{align}    \mathcal{1} &amp; = \mathrm{Succ}\ \mathcal{0} \\    \mathcal{2} &amp; = \mathrm{Succ}\ \mathcal{1} \\    \mathcal{3} &amp; = \mathrm{Succ}\ \mathcal{2} \\    &amp; \vdots\end{align}$$</p><p>Then the only question is how do we define the successor function.$$ \begin{align}    \mathcal{1} &amp; = \mathrm{Succ}\ \mathcal{0} \\    \lambda fx. fx &amp; = \mathrm{Succ}\ \lambda fx. x \\end{align}$$then we can define $\mathrm{Succ}$ to take a number (Church numeral) and the function $f$ to apply on it.$$ \mathrm{Succ} = \lambda nfx. f(nfx) $$Then we can verify that$$ \begin{align}    \mathrm{Succ}\ \mathcal{0}    &amp; = \lambda nfx. f(nfx) \ \mathcal{0} \\    &amp; = \lambda fx . f(\mathcal{0}fx) \\    &amp; = \lambda fx . fx \\    &amp; = \mathcal{1}.\end{align}$$</p><p>Then to prove $\mathrm{Succ}$ works for all Church numeral is trivial.Thus, we have a way to define Peano numbers in lambda calculus!</p><div class="note note-primary">            <p>Can we define $\mathrm{Succ}$ with the birds combinator we already seen?</p>          </div><p>We also define arithmetic!In the field of natural numbers,isn‚Äôt $\mathrm{Succ}\ n = n + 1$?What about general addition?As we learned from childhood,adding $x$ to $y$ is just add $1$ to $y$ for $x$ times,$$ \mathrm{Add} = \lambda xy . x\ \mathrm{Succ}\ y $$</p><p>If we do addition many times,we are doing multiplications.So we define multiplication as$$ \mathrm{Mult} = \lambda xyf. x(yf) = B $$which is the composition Bluebird!</p><div class="note note-primary">            <p>Can we define $\mathrm{Mult}$ as what we did for $\mathrm{Add}$?</p>          </div><div class="note note-primary">            <p>As we defined successor, how can we have the presuccessor function? Can the presuccessor function $\mathrm{PreSucc}$ lead us to subtraction $\mathrm{Subs}$?</p>          </div><h2 id="‚ÄúData-Structure‚Äù"><a href="#‚ÄúData-Structure‚Äù" class="headerlink" title="‚ÄúData Structure‚Äù"></a>‚ÄúData Structure‚Äù</h2><p>On the way to a finite-state machine?</p><p>Two fundamental data structures in programming are pairs and lists.And in functional programming,lists are defined with sets.</p><div class="note note-secondary">            <p>I still don‚Äôt understand why Java does not provide pair.</p>          </div><p>What is a pair?A pair by definition is a storage of two values, like <code>(a,b)</code>.Then let us define a lambda expression that hold two values.We also want some function to act of the pair,so our pair would need a $f$ as input.$$ \mathrm{Pair} = \lambda xyf. fxy $$in Haskell syntax it is just <code>(x,y)</code>.</p><p>Then we want a function to access these two values.That is, </p><ul><li>$\mathrm{Fst}$ that takes a pair and return its first value.</li><li>$\mathrm{Snd}$ that takes a pair and return its second value.</li></ul><p>Wait, isn‚Äôt this familiar?We already have Kestrel and Kite who take two values and return the first(second)!Then, we only need to apply Kestrel and Kite on the pair$$\begin{align}    \mathrm{Fst} &amp; = \lambda p. pK \\    \mathrm{Snd} &amp; = \lambda p. p(KI)\end{align}$$</p><p>For example, it evaluates as$$\begin{align}    \mathrm{Fst}(1,2) &amp;  = \lambda (1,2). (1,2)K = K\ 1\ 2 = 1 \\    \mathrm{Snd}(1,2) &amp;  = \lambda (1,2). (1,2)(KI) = KI\ 1\ 2 = 2.\end{align}$$</p><p>In Haskell, these two functions are defined as</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">fst</span> :: (a, b) -&gt; a<br><span class="hljs-title">snd</span> :: (a, b) -&gt; b<br></code></pre></div></td></tr></table></figure><p>With pair defined,we can define list easily.In a functional language, list is not a sequential list in memory(of course there is no memory lol).</p><p>In functional languages,list is defined as either</p><ul><li><em>nil</em>, or empty</li><li>a pair of (item, list)</li></ul><p>Let‚Äôs talk a look at how Haskell define a list</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">[<span class="hljs-number">1.</span><span class="hljs-number">.5</span>] === <span class="hljs-number">1</span>:(<span class="hljs-number">2</span>:(<span class="hljs-number">3</span>:(<span class="hljs-number">4</span>:(<span class="hljs-number">5</span>:[]))))<br></code></pre></div></td></tr></table></figure><p>In the Haskell,a list is defined as a set of numbers with some order,and a function (morphism) defined on each pair of them.In this case <code>[]</code> is the accumulator.</p><div class="note note-secondary">            <p>In functional programming, given any list,we can replace its accumulator and morphism defined on it,then get a new list defined with the new morphism and new accumulator.This way of list action is called <strong>fold</strong>.</p>          </div><p>Thus, to define out list in lambda calculus,$$ \mathrm{List} = \lambda ilf. fil $$where $i$ is the item, $l$ is the list.</p><p>Then its trivial to define the two most used function on list,<code>head</code> and <code>tail</code>.</p><ul><li><code>head</code> takes a list and returns its first element, i.e. the <code>item</code> $i$.</li><li><code>tail</code> takes a list and returns its second to last elements as a list, i.e. $l$.</li></ul><p>$$\begin{align}    \mathrm{Head} &amp; = \lambda l. lK \\    \mathrm{Tail} &amp; = \lambda l. l(KI)\end{align}$$</p><p>In Haskell, they are defined as</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">head</span> :: [a] -&gt; a<br><span class="hljs-title">tail</span> :: [a] -&gt; [a]<br></code></pre></div></td></tr></table></figure><h2 id="Recursion-or-‚ÄúLoop‚Äù"><a href="#Recursion-or-‚ÄúLoop‚Äù" class="headerlink" title="Recursion or ‚ÄúLoop‚Äù"></a>Recursion or ‚ÄúLoop‚Äù</h2><p>As it was defined,there is no recursion in lambda calculus.But we need recursion for a programming language to be useful,so Haskell Curry introduced the <strong>Y combinator</strong> (Fixed-point combinator).</p><p>Recall the Mockingbird.$$ M = \lambda f. ff $$we said it is the self-application bird.The Y combinator uses the self-application to achieve recursion$$ Y = \lambda f. (\lambda x. fMx) (\lambda x. fMx) = \lambda f. (\lambda x. f(xx)) (\lambda x. f(xx))$$</p><p>If we apply $\beta$-reduction on the Y combinator with some input,$$\begin{align}    Y\ g &amp; = \lambda f. (\lambda x. f(xx)) (\lambda x. f(xx)) g \\         &amp; = (\lambda x. g(xx)) (\lambda x. g(xx)) \\         &amp; = g\ ((\lambda x. g(xx)) (\lambda x. g(xx))) \\         &amp; = g\ (\ldots g\ ((\lambda x. g(xx)) (\lambda x. g(xx))) \ldots)\end{align}$$it is looping!</p><blockquote><p>In imperative programming,we would normally avoid using recursionbecause calling functions requires spaces in stack,whereas loop is constant in space.</p><p>To avoid extra costs in space,functional programming uses <em>tail call optimization</em> (TCO)that allows tail recursion to run in constant space.</p><p>Therefore, when writing function programs,try to use tail recursion as possible.</p></blockquote><div class="note note-info">            <p>For more information, visit</p><ul><li><a href="http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/1.LAMBDA-CALCULUS.html">Lambda Calculus Part I</a></li><li><a href="http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/2.LAMBDA-CALCULUS-PART2.html">Lambda Calculus Part II</a></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
      <tag>HackerHub</tag>
      
      <tag>Haskell</tag>
      
      <tag>programming</tag>
      
      <tag>functional</tag>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to Lambda Calculus</title>
    <link href="/2021/03/20/Lambda/"/>
    <url>/2021/03/20/Lambda/</url>
    
    <content type="html"><![CDATA[<h1 id="Lambda-Calculus"><a href="#Lambda-Calculus" class="headerlink" title="Lambda Calculus"></a>Lambda Calculus</h1><p>If you come from imperative programming,you might heard about the <strong>lambda expression</strong>.That is also called the ‚Äúanonymous function‚Äù.This is a concept borrowed from functional programming(the word ‚Äúfunction‚Äù kind of indicates that LOL).</p><div class="note note-secondary">            <p>When I first encounter the idea of ‚Äúanonymous function‚Äù,I did not understand the meaning of it.To me, it is more like a quick way to define simple method when I was too lazy.</p>          </div><p>But what really is Lambda calculus?It is a simple <strong>notation system</strong> developed by <a href="https://en.wikipedia.org/wiki/Alonzo_Church">Alonzo Church</a>to represent <a href="https://plato.stanford.edu/entries/logic-combinatory/">Combinatory logic</a>.Lambda calculus is also the base of Functional programming,similar to what binary code and later assembly language means to imperative languages.</p><p>From here, we can see the main difference between imperative programming and declarative programming:</p><ul><li>imperative programming build up from the hardware level, telling the computer what to do.  Then we build up the abstraction as possible.</li><li>declarative programming starts from logic,  then try to reduce abstraction for computer to understand  (that the compiler‚Äôs job, we only worry about logic).</li></ul><p>A lambda expression is just a function with out a name, a mapping, as$$ \lambda x . x $$which is just the identity function.</p><p>In Haskell, the syntax is</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">\x -&gt; x<br></code></pre></div></td></tr></table></figure><p>since we do not use unicode in programming,the character <code>\</code> the closed one to $\lambda$.</p><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p>Theoretically,lambda calculus does not allow the function to take more than one input.That is why we define binary operation as$$ * : S \times S \rightarrow S $$which takes a pair of numbers as input and returns a number.</p><p>This way of defining function is not very efficient,we want out function to take as much inputs as we want.mathematician <a href="https://en.wikipedia.org/wiki/Haskell_Curry">Haskell Brooks Curry</a>develops an idea to solve this problem.</p><div class="note note-secondary">            <p>There are three programming languages name after him,Haskell, Brook, and Curry.</p>          </div><p>The idea is that,for the function to take two inputs,iwe can to define a function that takes one inputthen returns a function thatalso (takes one input and returns one output).That is, for a binary operation, we write$$ * : S \rightarrow (S \rightarrow S) $$and the parenthesis can be ignored.</p><p>In lambda calculus, we write the binary operation as$$ \lambda x. (\lambda y. x * y) \equiv \lambda xy. x * y $$</p><p>With this idea in mind, we can play with some haskell functions.For example, we know addition takes two numbers and return their sum,what happens if we only give it one input?</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; :t (+)<br>(+) :: <span class="hljs-type">Num</span> a =&gt; a -&gt; a -&gt; a<br><span class="hljs-type">Prelude</span>&gt; :t (+<span class="hljs-number">1</span>)<br>(+<span class="hljs-number">1</span>) :: <span class="hljs-type">Num</span> a =&gt; a -&gt; a<br><span class="hljs-type">Prelude</span>&gt; <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-type">Prelude</span>&gt; (+<span class="hljs-number">1</span>) <span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><p>We also even give the returned function a name</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; add1 = (<span class="hljs-number">1</span>+)<br><span class="hljs-type">Prelude</span>&gt; add1 <span class="hljs-number">10</span><br><span class="hljs-number">11</span><br><span class="hljs-type">Prelude</span>&gt; map add1 [<span class="hljs-number">1.</span><span class="hljs-number">.10</span>]<br>[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]<br></code></pre></div></td></tr></table></figure><p>In this way, we can also define our own functions with defining the inputs</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">getEven</span> :: <span class="hljs-type">Integral</span> a =&gt; [a] -&gt; [a]<br><span class="hljs-title">getEven</span> = filter even<br></code></pre></div></td></tr></table></figure><p>This way of defining function is called <strong>wholemeal programming</strong>,which is the idiomatic Haskell style.</p><h2 id="beta-Reduction"><a href="#beta-Reduction" class="headerlink" title="$\beta$-Reduction"></a>$\beta$-Reduction</h2><p>$\beta$-Reduction is a way to simplify a complex lambda expression.The idea is very simple,we can plug the input into the lambda expression and see what happens.</p><p>For <a href="https://www.youtube.com/watch?v=3VQ382QG-y4&t=561s">example</a>,$$\begin{align}    &amp; ((\lambda a. a)\lambda b. \lambda c. b)(x) \lambda e.f \\    &amp; = (\lambda b.\lambda c.b)(x) \lambda e.f \\    &amp; = (\lambda c. x) \lambda e. f \\    &amp; = x.\end{align}$$</p><p>After we fully evaluate the function, we call it a <strong>$\beta$-normal</strong> form.</p><h2 id="Combinatory-Logic"><a href="#Combinatory-Logic" class="headerlink" title="Combinatory Logic"></a>Combinatory Logic</h2><p><strong>Definition:</strong>A <strong>combinator</strong> is a lambda expression that has no <em>free variable</em>.That is, the output can only be its inputs.</p><p>Recall that we can pass a function as argument.Let‚Äôs define a <strong>self-application</strong> function$$ M = \lambda f. ff $$which is often called the <strong>Mockingbirds</strong>.</p><blockquote><p>Imagine you are in a forest inhabited by talking birds.Given any birds $A$ and $B$ in the forest,if you call out the name of $B$ to $A$,then $A$ will respond by calling out the name of some other bird to you.Then by the name of Mockingbird,$$ Mx = xx $$the bird $M$‚Äôs response to any bird $x$ is the same as $x$‚Äôs response to itself.It <em>mimics</em> $x$ as far as $x$‚Äôs response to $x$ goes.</p></blockquote><div class="note note-info">            <p>This idea comes from the book <a href="https://en.wikipedia.org/wiki/To_Mock_a_Mockingbird">‚ÄúTo Mock a Mockingbird‚Äù</a>by Raymond Smullyan.It is a great book about combinatory logic and some other logic puzzles, very recommended.</p>          </div><p>Then we define <strong>Kestrel</strong>,$$ K = \lambda ab. a $$which takes two inputs and returns the first parameter.Haskell provide function <code>const</code> as the Kestrel,</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">const</span> :: a -&gt; b -&gt; a<br></code></pre></div></td></tr></table></figure><p>Thinking about the name <code>const</code>, let‚Äôs define</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">const1</span> :: <span class="hljs-type">Num</span> a =&gt; b -&gt; a<br></code></pre></div></td></tr></table></figure><p>then,</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; const1 <span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-type">Prelude</span>&gt; const1 <span class="hljs-number">5</span><br><span class="hljs-number">1</span><br><span class="hljs-type">Prelude</span>&gt; const1 <span class="hljs-number">10</span><br><span class="hljs-number">1</span><br><span class="hljs-type">Prelude</span>&gt; map const1 [<span class="hljs-number">1.</span><span class="hljs-number">.10</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p>The beauty of combinatory logic, as well as Functional programming,is thatwith identity, Mockingbird, and Kestrel, we can create the world.</p><p>What if we want the the second parameter instead of the first one?In the trivial way, we might define the function as $\lambda ab. b$.But if we think about this, we can identity as  Kestrel‚Äôs input$$ KIx = (\lambda ab. a)(\lambda a. a)x = \lambda x.x = I  $$which is the identity!Then we can try to apply this function to some value$$ KIxy = Iy = y. $$Let‚Äôs call the function $KI$  <strong>Kite</strong>.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">kite</span> :: a -&gt; b -&gt; b<br><span class="hljs-title">kite</span> = const id<br></code></pre></div></td></tr></table></figure><p>then </p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; kite <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-type">Prelude</span>&gt; kite <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-type">Prelude</span>&gt; kite <span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>Another fundamental combinator is the <strong>Cardinal</strong>, $$ C = \lambda fab. fba $$which is the <em>reverse application</em>.This is defined as the <code>flip</code> function in haskell.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">flip</span> :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c<br></code></pre></div></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; combineStr a b = show a ++ show b<br><span class="hljs-type">Prelude</span>&gt; :t combineStr <br><span class="hljs-title">combineStr</span> :: (<span class="hljs-type">Show</span> a1, <span class="hljs-type">Show</span> a2) =&gt; a1 -&gt; a2 -&gt; [<span class="hljs-type">Char</span>]<br><span class="hljs-type">Prelude</span>&gt; combineStr <span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-string">&quot;13&quot;</span><br><span class="hljs-type">Prelude</span>&gt; flip combineStr <span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-string">&quot;31&quot;</span><br><span class="hljs-type">Prelude</span>&gt; <br></code></pre></div></td></tr></table></figure><p>And the most important one is composition of functions!That is the reason why we talk about functional programming.Define the <strong>Bluebird</strong>$$ B = \lambda fga . f(ga) $$to be the composition combinator.</p><p>In Haskell, as shown in last post, is</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c<br></code></pre></div></td></tr></table></figure><p>Theoretically,using Kestrel and Cardinal we can get all the possible combinators.So there might be a way to compile any functional program into these two combinators.</p><blockquote><p>Can we build a working computer with only Kestrel and Cardinal?For more information, visit</p></blockquote><ul><li><a href="https://core.ac.uk/download/pdf/82459455.pdf">Functional Programming with Combinators</a>.</li><li><a href="https://www.youtube.com/watch?v=3VQ382QG-y4&t=561s">Lambda Calculus - Fullstack Academy</a>.</li></ul><p><strong>Note.</strong>If yuo want to try out the bird names in Haskell,there is a library for that<a href="https://hackage.haskell.org/package/data-aviary-0.4.0/docs/Data-Aviary-Birds.html">Data.Aviary.Birds</a></p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
      <tag>HackerHub</tag>
      
      <tag>Haskell</tag>
      
      <tag>programming</tag>
      
      <tag>functional</tag>
      
      <tag>logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Think about Functions</title>
    <link href="/2021/03/19/Function/"/>
    <url>/2021/03/19/Function/</url>
    
    <content type="html"><![CDATA[<h1 id="What-is-a-Function"><a href="#What-is-a-Function" class="headerlink" title="What is a Function?"></a>What is a Function?</h1><p>In imperative programming,we often say a function is a sub-module of out program.In order to make our program readable and clean,we often make the repeated parts into functions,then call then in the main part of program with parameters.For example,</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + <span class="hljs-number">5</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>If we have arbitrary integer <code>a</code>and want to apply the <code>+ 5</code> arithmetic on <code>a</code>,we can just use <code>foo(a)</code>.Deep behind this is a ‚Äúsubroutine‚Äù,another piece of code somewhere in memory that will do something to some value on stack,which is actually divergent from the definition of real ‚Äúfunction‚Äù.For example,</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-symbol">foo:</span><br>    pushq   %rbp<br>    <span class="hljs-keyword">movq</span>    %rsp, %rbp<br>    movl    %edi, -<span class="hljs-number">4</span>(%rbp)<br>    movl    -<span class="hljs-number">4</span>(%rbp), %eax<br>    addl    <span class="hljs-number">$5</span>, %eax<span class="hljs-comment">; here it does the job</span><br>    popq    %rbp<br><br><span class="hljs-symbol">main:</span> <span class="hljs-comment">; something</span><br></code></pre></div></td></tr></table></figure><p>But how do we interpret the concept of <em>function</em> in math?</p><h2 id="Definition-of-Function"><a href="#Definition-of-Function" class="headerlink" title="Definition of Function"></a>Definition of Function</h2><p>As we know from math class,function is a <strong>mapping</strong> between two sets of objects (any objects!).Suppose $X$ and $Y$ are sets.If $f$ is a function from $X$ to $Y$, we write$$ f : X \rightarrow Y $$and denote the element of $Y$ assigned to an element $x \in X$ by $f(x)$.</p><p>In Haskell, we can define a function very similar to this.Let <code>X</code> and <code>Y</code> be sets (types),a function mapping <code>X</code> to <code>Y</code> is</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">f</span> :: <span class="hljs-type">X</span> -&gt; <span class="hljs-type">Y</span><br></code></pre></div></td></tr></table></figure><p>and a function application of <code>x</code> in <code>X</code> is <code>f x</code> (without parenthesis).From here you can see Haskell is trying it best to make the syntax as close to math as possible.<code>:</code> is defined as an operator in Haskell,so we use <code>::</code> in the function definition.</p><p><strong>Note</strong></p><ul><li><code>f :: X -&gt; Y</code> is also called a <strong>type signature</strong> of a function.</li><li>Function is <em>left-associative</em>,   so we can ignore the parenthesis when function application,  as what Haskell did in its syntax.  That is, $fx$ is equivalent to $f(x)$.</li></ul><h1 id="Common-Functions"><a href="#Common-Functions" class="headerlink" title="Common Functions"></a>Common Functions</h1><p>As it is defined, function can map anything to anything!Let‚Äôs see some typical functions.</p><h2 id="Function-that-Does-Nothing"><a href="#Function-that-Does-Nothing" class="headerlink" title="Function that Does Nothing"></a>Function that Does Nothing</h2><p>In mathematics,there is a function that does literally nothing.</p><p><strong>Definition</strong>.An <em>identity function</em> maps anything to itself.That is, forall $x \in A$,function $\mathbb{1} : A \rightarrow A$ is defined as$$ \mathbb{1}(x) = \mathbb{1}x = x. $$(The first step is a demonstration of the left-associativity).</p><p>In Haskell, we have the predefined identity function for generic type <code>a</code>:</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">id</span> :: a -&gt; a<br></code></pre></div></td></tr></table></figure><p>With the identity function,we can actually define a functional ‚Äúvariable‚Äù,</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">x</span> = id <span class="hljs-number">5</span> :: <span class="hljs-type">Int</span><br><span class="hljs-comment">-- same as</span><br><span class="hljs-title">x</span> = <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><p>Why functional ‚Äúvariable‚Äù?In a pure functional language such as Haskell,there is no real variablefor the purpose of eliminating side effects.That is, all data is <strong>immutable</strong>.Many modern languages/tools also have this property,for example,<a href="https://flaviocopes.com/react-immutability/">React</a>and <a href="https://redux.js.org/faq/immutable-data">Redux</a>.</p><p><strong>Fun Knowledge:</strong>in math, we often ose the fancy 1, $\mathbb{1}$ or in $\LaTeX$ <code>\mathbb&#123;1&#125;</code>, to denote the identity.Why?There is a saying thatif we define multiplication on the real numbers $\mathbb{R}$,then 1 is the identity element such that $\forall x \in \mathbb{R} \setminus \{0\}$,$$ 1 \times x = x \times 1 = x. $$</p><h2 id="Function-on-Numbers"><a href="#Function-on-Numbers" class="headerlink" title="Function on Numbers"></a>Function on Numbers</h2><p>This is the most common type of function we learned in math.These functions accompany us from middle all the way to college (or even grad school if you focus on analysis.)These function can be categorized into two major classification:functions defined on $\mathbb{R}$, $ f : \mathbb{R} \rightarrow \mathbb{R} $and those are not, $ f : \mathbb{C} \rightarrow \mathbb{C}. $(Real Analysis and Complex Analysis are the math course that study the behavior of these functions.)</p><p>As for programming, we mostly focus on functions defined on $\mathbb{R}$.</p><p>The first imperative example,if we define it as a function, it also falls in this type.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">foo</span> :: <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">Int</span><br><span class="hljs-title">foo</span> x = x + <span class="hljs-number">5</span> <br></code></pre></div></td></tr></table></figure><p>These functions can have many interesting property with respect to the set they are acting on.For example, there are different type of sets.There are open and closed set, compact, or connected sets, each having some special structures.</p><p>A continuous function on a set <strong>preserves the structure</strong> of that set.That is, let $f : A \rightarrow \mathbb{R}$ be continuous on $A$.If $K \subseteq A$ is compact (or connected, or have other structures), then the set $fK$ is also compact (or connected, or have other structures).</p><div class="note note-secondary">            <p>If you are interested in this topic, go find some resources on Real Analysis and basic Topology.Also, I may write blog posts about this in the future.</p>          </div><p>A <strong>permutation</strong> is also this kind of function,which is a <em>bijection</em> defined on a set of $n$ distinct elements $S$,$$ p : S \rightarrow S. $$</p><div class="note note-info">            <p>For more information of permutation, see <a href="/2020/12/20/PermuAlgebra/index.html">Permualgebra</a>.</p>          </div><h3 id="Binary-Operations-Composition"><a href="#Binary-Operations-Composition" class="headerlink" title="Binary Operations (Composition)"></a>Binary Operations (Composition)</h3><p>A <strong>binary operation</strong> on a set $S$ is a function$$ * : S \times S \rightarrow S $$its mapping is $(a,b) \mapsto a * b$.Here the $\times$ operator is the <strong>Cartesian product</strong>,where$$ X \times Y = \{ (x,y): x \in X, y \in Y \}. $$</p><p>In other words,a binary operations is just some function that<u>takes two inputs and returns one output.</u>For example, addition, multiplication, function composition, are all binary operations.</p><div class="note note-primary">            <p>Discussion: Is division a binary operation?</p>          </div><p>There is another notation system for functions with more than 1 parameters in math,called <a href="https://en.wikipedia.org/wiki/Currying">Currying</a>, $$ * : S \rightarrow S \rightarrow S, $$where we see the last set as the output set(type),and the all the sets(types) before it as the input sets(types).</p><p>As we define in algebra, addition is$$ + : \mathbb{Z} \times \mathbb{Z} \rightarrow \mathbb{Z}, $$which can also be express as$$ + :  \mathbb{Z} \rightarrow \mathbb{Z} \rightarrow \mathbb{Z}. $$</p><div class="note note-secondary">            <p>There is a little difference between this two notation,we will discuss the details in post <a href="/2021/03/20/Lambda/index.html">Introduction to Lambda Calculus</a>.</p>          </div><p>In haskell, we can define function in the currying way,</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(+) :: <span class="hljs-type">Integer</span> -&gt; <span class="hljs-type">Integer</span> -&gt; <span class="hljs-type">Integer</span><br></code></pre></div></td></tr></table></figure><p>Note: type <code>Integer</code> in Haskell is an arbitrary precision type which will hold any number no matter how big, type <code>Int</code> is the standard <code>int</code> type in computer science.</p><p>By the way, Cartesian product itself is a binary operator.Write the definition of Cartesian product in Currying notation,$ \times : X \rightarrow Y \rightarrow (X,Y) $where$$ X \times Y = \{ (x,y): x \in X, y \in Y \}. $$we can define it very easily using Haskell <strong>list comprehensions</strong>.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">cartesian</span> :: [a] -&gt; [b] -&gt; [(a,b)]<br><span class="hljs-title">cartesian</span> xs ys = [(x, y) | x &lt;- xs, y &lt;- ys]<br></code></pre></div></td></tr></table></figure><p>Haskell also support infix operator definition automatically,for example</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; cartesian [<span class="hljs-number">1.</span><span class="hljs-number">.3</span>] [<span class="hljs-number">1.</span><span class="hljs-number">.3</span>]<br>[(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)]<br><span class="hljs-type">Prelude</span>&gt; [<span class="hljs-number">1.</span><span class="hljs-number">.3</span>] `cartesian` [<span class="hljs-number">1.</span><span class="hljs-number">.3</span>]<br>[(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)]<br></code></pre></div></td></tr></table></figure><p>You can also define the function the infix way</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">cartesian</span> :: [a] -&gt; [b] -&gt; [(a,b)]<br><span class="hljs-title">xs</span> `cartesian` ys = [(x, y) | x &lt;- xs, y &lt;- ys]<br></code></pre></div></td></tr></table></figure><p>which is equivalent to the first definition.</p><p>If we relate the math symbol with Haskell syntax, where$\{\} \leftrightarrows$ <code>[]</code>,$:,\leftrightarrows$ <code>|</code>,$\in,\leftrightarrows$ <code>&lt;-</code>,then math definition and Haskell code looks exactly the same!</p><p><strong>Definition:</strong> An <strong>identity</strong> for a binary operation on set $S$ s an <em>unique</em> element $e \in S$ such that$$ ae = a = ea $$ for all $a \in S$.We often use $\mathbb{1}$ to denote the identity.</p><div class="note note-secondary">            <p>Isn‚Äôt this definition familiar?</p>          </div><h4 id="Binary-Operation-on-List"><a href="#Binary-Operation-on-List" class="headerlink" title="Binary Operation on List"></a>Binary Operation on List</h4><p>There are two major binary operator of lists.Since there are no lists in real math,I will just write the Haskell type signature.</p><p><code>:</code> is the operator that joint a element and a list of the same type,and <code>++</code> joints two lists of same type.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(:) :: a -&gt; [a] -&gt; [a]<br>(++) :: [a] -&gt; [a] -&gt; [a]<br></code></pre></div></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; <span class="hljs-number">1</span> : [<span class="hljs-number">2.</span><span class="hljs-number">.10</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br><span class="hljs-type">Prelude</span>&gt; [<span class="hljs-number">1.</span><span class="hljs-number">.5</span>] ++ [<span class="hljs-number">6.</span><span class="hljs-number">.10</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br></code></pre></div></td></tr></table></figure><h2 id="Function-on-Vectors"><a href="#Function-on-Vectors" class="headerlink" title="Function on Vectors"></a>Function on Vectors</h2><p>Recall the idea of vector spaces $\mathbb{R}^n$.The <strong>dot product</strong> is a binary operation of vectors$$ (\cdot) : \mathbb{R}^n \rightarrow \mathbb{R}^n \rightarrow \mathbb{R}. $$</p><p><strong>Definition:</strong>A function $$T : \mathbb{R}^n \rightarrow \mathbb{R}^n$$is a <strong>linear transformation</strong> or <strong>linear operator</strong> of $\mathbb{R}^n$ if$$ T(x + y) = Tx + Ty $$ for all $x,y \in \mathbb{R}^n$and  $T(cx) = cTx$ for all $c \in \mathbb{R}, x \in \mathbb{R}^n$.</p><div class="note note-secondary">            <p>In this case, a matrix is function!</p>          </div><p><strong>Definition:</strong>Let $T : \mathbb{R}^n \rightarrow \mathbb{R}^n$ be a linear transformation.Then $T$ is called an <strong>orthogonal operator</strong> if,$$ Tx \cdot Tx = x \cdot y $$for all $x, y \in \mathbb{R}^n$.</p><p>For example, let vector $u \in \mathbb{R}^2$.Then for linear operator $T : \mathbb{R}^2 \rightarrow \mathbb{R}^2$,let$$ T = \begin{bmatrix}    1 &amp; 0 \\    0 &amp; -1\end{bmatrix},$$then $Tu$ would be the reflection uf $u$ around the x-axis.</p><p>A 3-by-3 matrix would be the function thatmap a 3D vector to another vector in 3D space.</p><h2 id="Function-on-Figure"><a href="#Function-on-Figure" class="headerlink" title="Function on Figure"></a>Function on Figure</h2><p>Function can also act on figures!Consider a right pentagon, number all its angle with number 1 to 5.Define $$ x : Pentagon \rightarrow Pentagon $$which rotate the pentagon by $2\pi/n$ around its center.Define $$ y : Pentagon \rightarrow Pentagon $$which rotate the pentagon by $\pi$ about vertical.</p><p><img src="/images/P5.jpg" alt="Picture of pentagon"></p><p>Let $x^2$ be the composition of two $x$, then same idea for all $x^n$, $y^n$.Then we notice that</p><ul><li>$x^5$ is the same as $\mathbb{1}$,</li><li>$x^6$ is the same as $x$,</li><li>$y^2$ is the same as $\mathbb{1}$,</li><li>$y^3$ is the same as $y$,</li><li>$yx$ is the same as $x^4y$.</li></ul><p>Then we can find the set of all functions of this pentagon,$$ \{ \mathbb{1}, x, x^2, x^3, x^4, y, xy, x^2y, x^3y, x^4y \}. $$</p><h2 id="Function-on-Functions"><a href="#Function-on-Functions" class="headerlink" title="Function on Functions"></a>Function on Functions</h2><p>When we talk about functional programming,there is a feature called function as <strong>first-class citizenship</strong>.That means function is just data, no difference than other types of data.Therefore, of course we can pass function as parametersand return a function as output.</p><div class="note note-secondary">            <p>JavaScript supports this feature as well.</p>          </div><p><strong>Definition:</strong>A <strong>higher-order function</strong> is a function that either (can be both)</p><ul><li>takes function as input parameter,</li><li>return function as output.</li></ul><p>This design is for another true purpose of function programming:reuse the existing functions as much as possibleto reduce the complexity of code.</p><h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><p>One great example is the <strong>composition operator</strong>.Composition is just a binary operation between functions/Let $A,B,C$ be sets, then$$ \circ : (B \rightarrow C) \rightarrow (A \rightarrow B)\rightarrow (A \rightarrow C) $$where $f \circ g\ x = f(gx)$.That is, the operator $\circ$ takesa function that map $A$ to $B$ anda function that map $B$ to $C$,then return a function that map $A$ to $C$.</p><p>In Haskell, we define the composition operator as</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell">(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c<br><span class="hljs-title">f</span> . g x = f (g x) <br></code></pre></div></td></tr></table></figure><h3 id="Applying-Function-on-List"><a href="#Applying-Function-on-List" class="headerlink" title="Applying Function on List"></a>Applying Function on List</h3><p>Haskell also provides other useful higher-order functions.</p><p>One is$$ map : (A \rightarrow B) \rightarrow [A] \rightarrow [B]. $$As this type signature suggests,it takes a function and map $A$ to $B$ and a list $A$,apply this function to all elements of $A$ to get a list of $B$.</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">map</span> :: (a -&gt; b) -&gt; [a] -&gt; [b]<br></code></pre></div></td></tr></table></figure><p>which runs as</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; map (<span class="hljs-number">1</span>+) [<span class="hljs-number">1.</span><span class="hljs-number">.10</span>]<br>[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>]<br><span class="hljs-type">Prelude</span>&gt; map (read :: <span class="hljs-type">String</span> -&gt; <span class="hljs-type">Int</span>) [<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-type">Prelude</span>&gt; map (show :: <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">String</span>) [<span class="hljs-number">1.</span><span class="hljs-number">.5</span>]<br>[<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>]<br></code></pre></div></td></tr></table></figure><p>Another one is$$ filter : (A \rightarrow Bool) \rightarrow [A] \rightarrow [A] $$takes two parameters</p><ul><li>a function map from type $A$ to a boolean</li><li>and a list of $A$.</li></ul><p>When a function outputs a boolean value,we can view it as a ‚Äúcondition‚Äù.If the condition is satisfied (i.e. <code>True</code>),<code>filter</code> takes this value.</p><p>In Haskell, <code>filter</code> is defined as</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">filter</span> :: (a -&gt; <span class="hljs-type">Bool</span>) -&gt; [a] -&gt; [a]<br></code></pre></div></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; filter even [<span class="hljs-number">1.</span><span class="hljs-number">.10</span>]<br>[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>]<br><span class="hljs-type">Prelude</span>&gt; filter odd [<span class="hljs-number">1.</span><span class="hljs-number">.10</span>]<br>[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br></code></pre></div></td></tr></table></figure><p>Using three of them together, we can get</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-type">Prelude</span>&gt; map (even . read) [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>]<br>[<span class="hljs-type">False</span>,<span class="hljs-type">True</span>,<span class="hljs-type">False</span>,<span class="hljs-type">True</span>,<span class="hljs-type">False</span>]<br><span class="hljs-type">Prelude</span>&gt; filter (even . read) [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>]<br>[<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>]<br><span class="hljs-type">Prelude</span>&gt; filter id (map (even . read) [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>])<br>[<span class="hljs-type">True</span>,<span class="hljs-type">True</span>]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
      <tag>HackerHub</tag>
      
      <tag>Haskell</tag>
      
      <tag>programming</tag>
      
      <tag>functional</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2021/03/18/Hello-Hexo/"/>
    <url>/2021/03/18/Hello-Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Just switch my blog to Hexo framework, powered by Node.js.</p>]]></content>
    
    
    <categories>
      
      <category>Random</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Permutation Algebra</title>
    <link href="/2020/12/20/PermuAlgebra/"/>
    <url>/2020/12/20/PermuAlgebra/</url>
    
    <content type="html"><![CDATA[<h1 id="Permualgebra"><a href="#Permualgebra" class="headerlink" title="Permualgebra"></a>Permualgebra</h1><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip3 install permualgebra<br></code></pre></div></td></tr></table></figure><h2 id="Permutation"><a href="#Permutation" class="headerlink" title="Permutation"></a>Permutation</h2><p>Let $S$ be a set of $n$ distinct elements. A <strong>permutation</strong> of $S$ is a <em>bijection</em></p><p>$$p : S \rightarrow S.$$</p><p>For example, let $S = { 1,2,3,4,5,6 }$, define</p><table><thead><tr><th>$i$</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>$p(i)$</td><td>6</td><td>3</td><td>2</td><td>4</td><td>5</td><td>1</td></tr></tbody></table><p>Or a permutation can be written in <strong>cycle notation</strong>, where we often <em>omit</em> the 1-cycles:</p><p>$$p = \text{(1 6)(2 3)(4)(5)} = \text{(1 6)(2 3)}$$</p><p>this cycle notation is also the way that this package express a permutation.</p><ul><li>The <strong>length of a cycle</strong> is the number of elements of  in that cycle.</li><li>The <strong>length of a permutation</strong> is the number of cycles in that permutation.</li></ul><h2 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h2><p><strong>Every permutation</strong> on $S = [1..n]$ can be written as a product of disjoint cycles.i.e. no elements of $S$ is repeated in the cycle description.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> permualgebra <span class="hljs-keyword">as</span> pm<br>p = pm.Permutation([<span class="hljs-string">&quot;3 6 4 2&quot;</span>, <span class="hljs-string">&quot;1 3 4 6&quot;</span>, <span class="hljs-string">&quot;5 2 1 3&quot;</span>])<br>print(p)            <span class="hljs-comment"># (3 6 4 2)(1 3 4 6)(5 2 1 3)</span><br>pSimplify = p.getSimplify()<br>print(pSimplify)    <span class="hljs-comment"># (1 2 6)(3 5)</span><br>p.simplify()<br>print(p)            <span class="hljs-comment"># (1 2 6)(3 5)</span><br></code></pre></div></td></tr></table></figure><p>Suppose we have 2 permutations $p : S \rightarrow S$ and $q : S \rightarrow S$,we can compose them as</p><p>$$p \circ q : S \rightarrow S. $$</p><p>we often write $p \circ q$ as $pq$.</p><p><strong>Note.</strong>composition of permutations is not commutative.</p><p>Let $p = \text{(1 5)(2 4 6)}$, $q = \text{(1 3 5 4)(2 6)}$, then we have</p><p>$$    pq     = \text{(1 5)(2 4 6)(1 3 5 4)(2 6)}    = \text{(1 3)(2)(4 5 6)}    = \text{(1 3)(4 5 6)}$$</p><p>and</p><p>$$\begin{align*}    qp    = \text{(1 3 5 4)(2 6)(1 5)(2 4 6)}    = \text{(1 4 2)(3 5)}    \neq pq.\end{align*}$$</p><p>This package implements the composition of permutation as <em>multiplication</em>. </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> permualgebra <span class="hljs-keyword">as</span> pm<br><br>p = pm.Permutation([<span class="hljs-string">&quot;1 5&quot;</span>, <span class="hljs-string">&quot;2 4 6&quot;</span>])<br>q = pm.Permutation([<span class="hljs-string">&quot;1 3 5 4&quot;</span>, <span class="hljs-string">&quot;2 6&quot;</span>])<br>p.simplify()<br>q.simplify()<br>print((p*q).getSimplify())  <span class="hljs-comment"># (1 3)(4 5 6)</span><br>print((q*p).getSimplify())  <span class="hljs-comment"># (1 4 2)(3 5)</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>math</tag>
      
      <tag>algebra</tag>
      
      <tag>programming</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data Representation</title>
    <link href="/2020/10/18/DataRepresentation/"/>
    <url>/2020/10/18/DataRepresentation/</url>
    
    <content type="html"><![CDATA[<h1 id="Binary-Representation"><a href="#Binary-Representation" class="headerlink" title="Binary Representation"></a>Binary Representation</h1><p>Everything in the computer is represented using a very simple binary coding scheme where the only symbols used are 0 and 1.</p><ul><li><strong>Magnetic disks</strong>: magnetic material can be polarized to one and two extremes (‚Äúnorth‚Äù or ‚Äúsouth‚Äù) to represent a 0 or a 1.</li><li><strong>Memory</strong>: each bit can be thought of as an electronic switch that is either off or on representing a 0 or a 1, or, depending on how the memory is made, as collections of electrons. (In old days, memory literally was tiny circular magnets, but no longer.)</li><li><strong>CDs/DVDs</strong>: the surface consists of smooth areas and pits representing 0‚Äôs and 1‚Äôs respectively.</li><li><strong>Bus (wire)</strong>: voltage or current</li></ul><h2 id="What-can-be-represented-by-bits"><a href="#What-can-be-represented-by-bits" class="headerlink" title="What can be represented by bits?"></a>What can be represented by bits?</h2><ul><li>a bit (short for ‚Äúbinary digit‚Äù) is the fundamental data component: either a 1 or a 0</li><li>8 bits** is called a <strong>byte</strong>, A byte can represent:<ul><li>256 different numbers</li><li>256 different characters from your keyboard (Programming languages typically use 2 byte to represent a character)</li><li>256 different shades of gray in a black and white image</li><li>256 colors or shades of color in a color image</li><li>256 frequencies or tones to be played through a speaker</li><li>256 of anything that can be <em>represented as discrete entities</em> </li></ul></li><li>the max value for $n$ bits is $2^{n-1} - 1$, whereas the min value is $-2^n$.</li></ul><h1 id="Number-System"><a href="#Number-System" class="headerlink" title="Number System"></a>Number System</h1><table><thead><tr><th align="center"><strong>Base 10</strong></th><th align="center"><strong>Base 2</strong></th><th align="center"><strong>Base 8</strong></th><th align="center"><strong>Base 16</strong></th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0000</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0001</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">0010</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">0011</td><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">0100</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">5</td><td align="center">0101</td><td align="center">5</td><td align="center">5</td></tr><tr><td align="center">6</td><td align="center">0110</td><td align="center">6</td><td align="center">6</td></tr><tr><td align="center">7</td><td align="center">0111</td><td align="center">7</td><td align="center">7</td></tr><tr><td align="center">8</td><td align="center">1000</td><td align="center">10</td><td align="center">8</td></tr><tr><td align="center">9</td><td align="center">1001</td><td align="center">11</td><td align="center">9</td></tr><tr><td align="center">10</td><td align="center">1010</td><td align="center">12</td><td align="center">A</td></tr><tr><td align="center">11</td><td align="center">1011</td><td align="center">13</td><td align="center">B</td></tr><tr><td align="center">12</td><td align="center">1100</td><td align="center">14</td><td align="center">C</td></tr><tr><td align="center">13</td><td align="center">1101</td><td align="center">15</td><td align="center">D</td></tr><tr><td align="center">14</td><td align="center">1110</td><td align="center">16</td><td align="center">E</td></tr><tr><td align="center">15</td><td align="center">1111</td><td align="center">17</td><td align="center">F</td></tr></tbody></table><h2 id="Signed-Numbers"><a href="#Signed-Numbers" class="headerlink" title="Signed Numbers"></a>Signed Numbers</h2><h3 id="Signed-Magnitude"><a href="#Signed-Magnitude" class="headerlink" title="Signed Magnitude"></a>Signed Magnitude</h3><ul><li>the left-most bit in the binary number is the sign<ul><li>0 is <strong>positive</strong></li><li>1 is <strong>negative</strong></li></ul></li><li>$00000011_2$ is $+3_{10}$</li><li>$10000011_2$ is $-3_{10}$</li></ul><h2 id="Two‚Äôs-Complement"><a href="#Two‚Äôs-Complement" class="headerlink" title="Two‚Äôs Complement"></a>Two‚Äôs Complement</h2><p>take opposite of each bit, then add one</p><h1 id="Characters"><a href="#Characters" class="headerlink" title="Characters"></a>Characters</h1><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>American Standard Code for Information Interchange</p><ul><li>A-Z: 65-90</li><li>a-z: 97-122</li><li>0-9: 48-57</li></ul><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>addition to ASCII that can represent more characters, covers lots of emojis and most existing languages.</p><p><a href="https://www.unicode.org/versions/">More Information</a></p>]]></content>
    
    
    <categories>
      
      <category>Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>assembly</tag>
      
      <tag>HackerHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackerHub Info Session</title>
    <link href="/2020/09/28/HackerHub_Info/"/>
    <url>/2020/09/28/HackerHub_Info/</url>
    
    <content type="html"><![CDATA[<h1 id="HackerHub-Info"><a href="#HackerHub-Info" class="headerlink" title="HackerHub Info"></a>HackerHub Info</h1><p><img src="/imgaes/HackerHub_Info_Meeting.png" alt="Info Session Flyer"></p><p>Hello everyone!!! We are having an info session for our new upcoming CS club, HackerHub. The club focuses on bi-weekly Code Jams based on a provided theme or technology. We aim to create a relaxed, educational environment and atmosphere that is conducive for networking, learning, and project creation. Anyone is welcome to join our zoom meeting to learn more about who we are and what our plans for this upcoming quarter are! NO EXPERIENCE IN CS/PROGRAMMING IS NEEDED! </p><h2 id="How-to-find-us"><a href="#How-to-find-us" class="headerlink" title="How to find us:"></a>How to find us:</h2><ul><li><p><a href="https://ucdavis.zoom.us/j/98563177960?pwd=RnRNMGhKV003dGpuRVpIYnZFVk9DQT09&fbclid=IwAR1w1di8dgEojO8-du6DRk8yK3o1FuieTRiW3VIUqTiJFw1HOYNcfXzjgZk#success">Zoom Meeting</a> </p><ul><li>Meeting ID: 985 6317 7960</li><li>Passcode: 204560</li></ul></li><li><p><a href="https://discord.gg/WVmaJaA">Discord server</a></p></li><li><p><a href="https://www.facebook.com/hackerhubclub">Facebook</a></p></li><li><p><a href="https://twitter.com/HackerHubClub">Twitter</a></p></li><li><p><a href="https://www.instagram.com/hackerhubclub/">Instagram</a></p></li><li><p><a href="https://www.linkedin.com/company/hacker-hub">LinkedIn</a></p></li></ul><h2 id="To-Join"><a href="#To-Join" class="headerlink" title="To Join:"></a>To Join:</h2><p><a href="https://aggielife.ucdavis.edu/organization/hackerhub"><strong>AggieLife</strong></a>: <a href="https://aggielife.ucdavis.edu/organization/hackerhub">https://aggielife.ucdavis.edu/organization/hackerhub</a></p>]]></content>
    
    
    <categories>
      
      <category>HackerHub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HackerHub</tag>
      
      <tag>programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Setting Up PostgresSQL on Ubuntu</title>
    <link href="/2020/09/26/PostgresSQL/"/>
    <url>/2020/09/26/PostgresSQL/</url>
    
    <content type="html"><![CDATA[<h1 id="PostgresSQL"><a href="#PostgresSQL" class="headerlink" title="PostgresSQL"></a>PostgresSQL</h1><p>This blog is a note for myself about setting up PostgreSQL on Ubuntu devices, as a preparation for UC Davis ECS 165A.Although this blog is about PostgreSQL, other SQL languages (MySQL, ‚Ä¶) should be very similar to begin.The steps should also be the same for all Debian-based Linux Distros.</p><h2 id="Get-PostgreSQL"><a href="#Get-PostgreSQL" class="headerlink" title="Get PostgreSQL"></a>Get PostgreSQL</h2><p>The following scripts are from <a href="https://www.postgresql.org/download/linux/ubuntu/">Postgresql official website</a>.</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Create the file repository configuration:</span><br>sudo sh -c \<br>  &#x27;echo &quot;deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&quot; &gt; \<br>  /etc/apt/sources.list.d/pgdg.list&#x27;<br><br><span class="hljs-meta">#</span><span class="bash"> Import the repository signing key:</span><br>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -<br><br><span class="hljs-meta">#</span><span class="bash"> Update the package lists:</span><br>sudo apt-get update<br><br><span class="hljs-meta">#</span><span class="bash"> Install the latest version of PostgreSQL.</span><br><span class="hljs-meta">#</span><span class="bash"> If you want a specific version, use <span class="hljs-string">&#x27;postgresql-12&#x27;</span> or similar instead of <span class="hljs-string">&#x27;postgresql&#x27;</span>:</span><br>sudo apt-get -y install postgresql<br></code></pre></div></td></tr></table></figure><h2 id="Get-an-IDE"><a href="#Get-an-IDE" class="headerlink" title="Get an IDE"></a>Get an IDE</h2><p>Or just just the command line ‚Ä¶</p><p>Since I am new to SQL, I think an IDE may help me to learn faster. For now, my choice is <strong>DataGrip</strong> from JetBrains. Since I‚Äôm using my education account, it is free.</p><p>We can install JetBrains‚Äô application directly from Snapcraft.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo snap install datagrip --classic<br></code></pre></div></td></tr></table></figure><p>But for some unknown reason, snap apps are very slow to start and run,so I prefer to download and install from JetBrains <a href="https://www.jetbrains.com/datagrip/download/#section=linux">DataGrip website</a>.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
      <tag>Linux</tag>
      
      <tag>PostgresSQL</tag>
      
      <tag>SQL</tag>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OneDrive and WeChat</title>
    <link href="/2020/08/28/OnedriveLinux/"/>
    <url>/2020/08/28/OnedriveLinux/</url>
    
    <content type="html"><![CDATA[<h1 id="Setup-Ubuntu-for-a-Windows-user"><a href="#Setup-Ubuntu-for-a-Windows-user" class="headerlink" title="Setup Ubuntu for a Windows user"></a>Setup Ubuntu for a Windows user</h1><p>Last Year I found my EDC hp laptop is super slow and hot running Windows 10 and WSL, so I installed Ubuntu 18.04  Bionic Beaver (Of course, updated to 20.04 now). Today when I am playing with my main computer (MSI GS65), I accidentally delete the startup drivers for my Windows 10. But instead of reinstalling Windows, I think this is a good time to switch to Linux community ‚Äúcompletely‚Äù.</p><p>Last year I also tried Ubuntu on my MSI laptop, but it was very hard to get my Nvidia graphics working. So this time, I choose the newest <a href="https://pop.system76.com/">Pop!_OS</a> with Nvidia drivers pre-buildin as my main operating system. It also looks very pretty üòÜ !</p><p>For the past year, there two concerns stopping me to go complete Linux</p><ol><li><a href="#OneDrive">OneDrive</a>: All my files are stored on OneDrive, but there is not a good sync application on Ubuntu that is free as it on windows.</li><li><a href="#WeChat">WeChat</a>: Sometimes I need wechat to communicate, especially for people like me who don‚Äôt look at their phone at work. Now wechat is getting banned, so this worry does not exist anymore.</li></ol><p>Thankfully I manage to find a free open-source OneDrive client on GitHub. This blog is for me to remember the setup process so it could be easier next time.</p><h2 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Here is the github repo for this app: <a href="https://github.com/abraunegg/onedrive">OneDrive Client for Linux</a>.</p><p>First we need the dependencies:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt update<br>sudo apt install libcurl4-openssl-dev libsqlite3-dev build-essential pkg-config<br></code></pre></div></td></tr></table></figure><p>We also need <code>dlang</code> , we can find the <code>.deb</code> package <a href="http://downloads.dlang.org/releases/2.x/2.093.1/dmd_2.093.1-0_amd64.deb">here</a>. Then install it:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt install ~/Downloads/dmd_2.093.1-0_amd64.deb<br></code></pre></div></td></tr></table></figure><p>Then manually install the app:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://github.com/abraunegg/onedrive<br>cd onedrive<br>./configure<br>make<br>sudo make install<br></code></pre></div></td></tr></table></figure><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>After the installation, we need to set up the program on the first run:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">onedrive<br></code></pre></div></td></tr></table></figure><p>Then a link will appears on the terminal, click it, open in any browser, and login to Microsoft account. After login, the web page will turn to blank. At time time, copy the url of this blank page and paste into the terminal, then hit ENTER. BOOM!! Setup finished!</p><p>Then we need to sync the files onto the new computer:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">onedrive --synchronize<br></code></pre></div></td></tr></table></figure><p>This would take several hours, depends on your total file size on OneDrive and you network. This process can be stopped, just use the same command to continue.</p><p>Here is something useful: in your <code>.zshrc</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">alias sync=&quot;onedrive --synchronize&quot;<br>alias monitor=&quot;onedrive --monitor&quot;<br></code></pre></div></td></tr></table></figure><p>For a more detailed usage description, look at its <code>man</code> page:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">man onedrive<br></code></pre></div></td></tr></table></figure><h2 id="WeChat"><a href="#WeChat" class="headerlink" title="WeChat"></a>WeChat</h2><p>Since Tencent will not launch a Linux version, we need to use <a href="https://www.winehq.org/">wine</a>.For WeChat and other Chinese applications, it is easier to use the open-source <a href="https://github.com/zq1997/deepin-wine">deepin-wine</a>.For Chinese version of this part, please read the README page for this repository.</p><p>First, get the repository onto our list:</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">wget -O- https://deepin-wine.i-m.dev/setup.sh | sh<br></code></pre></div></td></tr></table></figure><p>Then we can easily use the <code>apt</code> package manager to install the apps we need.</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt install deepin.com.wechat<br></code></pre></div></td></tr></table></figure><p>For other Chinese app with no Linux support:</p><table><thead><tr><th align="left">Name</th><th align="left">Package name</th></tr></thead><tbody><tr><td align="left">ÂæÆ‰ø°</td><td align="left"><code>deepin.com.wechat</code></td></tr><tr><td align="left">QQ</td><td align="left"><code>deepin.com.qq.im</code></td></tr><tr><td align="left">TIM (QQ office Áâà)</td><td align="left"><code>deepin.com.qq.office</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>OneDrive</tag>
      
      <tag>WeChat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>American Dream</title>
    <link href="/2020/08/25/American-Dream/"/>
    <url>/2020/08/25/American-Dream/</url>
    
    <content type="html"><![CDATA[<h1 id="The-American-Dream"><a href="#The-American-Dream" class="headerlink" title="The American Dream"></a>The American Dream</h1><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p><em>This is a discussion post during class after the discussion of the musical ‚ÄúHamilton‚Äù</em></p><p>Do you believe that the ‚ÄúAmerican Dream‚Äù is accessible by all who come to this country?</p><h2 id="Ha"><a href="#Ha" class="headerlink" title="Ha"></a>Ha</h2><p><strong>No.</strong>This is a hard deny to what characterized the US.Despite the negative connotation of the word ‚Äústereotype‚Äù,‚ÄúAmerican Dream‚Äù is a stereotype of the US since it does not really exist but everyone believes it:an ideology, a system of belief.The famous DREAM Act for immigrants and the DREAMers (immigrant who was affected) are the classic examples of ‚ÄúAmerican Dream‚Äù and people who come to this country.But instead of helping people achieve this American Dream, this bill would instead make a subset of undocumented youth vulnerable to deportation<a href="https://www.themarshallproject.org/2019/06/17/the-new-dream-act-holds-some-dreamers-pasts-against-them">(‚ÄúThe New Dream Act Holds Some Dreamers‚Äô Pasts Against Them.‚Äù)</a>.The hegemony political situation in the country leads to criminalization in the migrant community,diving the community into ‚Äúgood He 3 immigrant‚Äù and ‚Äúbad immigrant‚Äù<a href="https://www.researchgate.net/publication/304718039_Transformations_of_the_undocumented_youth_movement_and_radical_egalitarian_citizenship">(Schwiertz)</a>.Even charity (the support provided by the government or healthy people) is only offered to groups of people who meet the requirements under moral frameworks, including faithful, not alcoholic, or having children (Dean Spade ‚ÄúSolidarity is Not Charity‚Äù).Therefore I don‚Äôt believe that the ‚ÄúAmerican Dream‚Äù is accessible by all who come to this country.</p>]]></content>
    
    
    <categories>
      
      <category>Random</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ideology</tag>
      
      <tag>MUS117</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apes**t: Behind the Scene</title>
    <link href="/2020/08/20/Apeshit/"/>
    <url>/2020/08/20/Apeshit/</url>
    
    <content type="html"><![CDATA[<h1 id="Apes-t"><a href="#Apes-t" class="headerlink" title="Apes**t"></a>Apes**t</h1><p><a href="https://www.youtube.com/watch?v=kbMqWXnpXcA">Apes**t</a> is a music by The Carters.It is famous for its wonderful and meaningful music video. What‚Äôs behind the scene?</p><h2 id="Connotations-and-Denotations"><a href="#Connotations-and-Denotations" class="headerlink" title="Connotations and Denotations"></a>Connotations and Denotations</h2><p>To explicate the quote ‚ÄúConnotations parading as denotations‚Äù, it is necessary to examine the meaning of these three concepts first. Denotation, as the noun form of ‚Äúdenote‚Äù, is ‚Äúthe explicit or direct meaning of a word or expression‚Äù (Dictionary.com) ‚Äìthat is, the definition one finds in a dictionary, as the one I state here. A word‚Äôs or expression‚Äôs denotation does not alter with speakers of different backgrounds, experiences, or knowledge. Connotation of a word, on the other hand, might be interpreted differently by individuals because it refers to the associations connected to a word or the emotions and feelings related to that word. ‚ÄúParading as‚Äù, in this context, means ‚Äúshowing up as‚Äù. In order to understand this quote, we need to focus on its subject: ideology. Sturken defines ideology as ‚Äúthe broad but indispensable, shared set of values and beliefs through which individuals live out their complex relations to a range of social structures‚Äù (Sturken 46), but he points out soon that ideologies ‚Äúappear to be natural or given, rather than part of a system of belief that culture produces (Sturken 46, with my stress)‚Äù. Obviously, by obtaining consent with hegemony, ideologies show up as innocent, unhidden denoted meanings that pervade in people‚Äôs life.</p><h2 id="In-the-MV"><a href="#In-the-MV" class="headerlink" title="In the MV"></a>In the MV</h2><p>In the music video Apes**t by the Carters, Beyonc√© and Jay-Z lead a tour into the Louvre in Paris, claiming the power of and justice for black people, and supporting Colin Kaepernick and Eric Reid for their kneeling during the anthem. The Louvre is the most famous representation of art, love, history, and power to the world for its abundant collection of art. At the same time, the Louvre also connotates power and leadership for its collection of art from the Napoleonic era and those snatched from other nations.</p><p>At the beginning and the end of the video, Beyonc√© and Jay-Z look into the camera standing in front of Mona Lisa, they turn around, staring at the painting after glancing at each other. At least four kinds of ‚Äúlooking‚Äù happen here: Mona Lisa‚Äôs innocent, mysterious gaze, The Caters‚Äô (rebellious? scornful?) gaze at the camera (or the audience), at the painting and at each other. Given the popularity of this best known, most-watched work of art, there is another looking happening here: the admiring gaze of the imaginary crowds of tourists. All these looking was woven together to create an image Beyonc√© and Jay-Z intend to convey ‚Äì while we are watching you, we need to be, should be, and have been seen.</p><p><img src="/images/apeshit_1.jpg" alt="fig1"></p><p>The first scene I select is at 2:57 of the video, when the dancers are dancing on the stages in front of the sculpture of Winged Victory of Samothrace. The denotation of this scene is easily seen as the dancers swaying their heads in a line. The connotation of this scene is the advancement and the rise of power of black people over the years as they show all their heads in front of the headless goodness of victory Nike.</p><p><img src="/images/apeshit_2.jpg" alt="fig2"></p><p>The second scene I select is at 5:03, when the duo poise in front of the Venus de Milo.  While Beyonc√© is imitating the S curve and waving her arms in front of the statue of love and beauty, Jay-Z stands still, gazing at her wife in meditation. The connotation of this scene is to highlight the beauty of black women. With this iconic work of art that symbolizes European beauty standards as the background, Beyonc√©‚Äôs pose and performance reveal the undeniable beauty of black females and challenges the conventional standard of beauty.</p><p>While I agree with Lucia‚Äôs analysis that the video emphasizes black splendor, it is hard not to notice the wealth splendor connotated consciously or unconsciously in the video. Beyonc√© and Jay-Z are not ‚Äúany‚Äù black people; they are wealthy black people who are financially capable of renting the whole museum for performance for whatever goals. It is not only a celebration of colored people‚Äôs victory but more importantly, a celebration of the capital‚Äôs victory.</p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Music</tag>
      
      <tag>Hip-hop</tag>
      
      <tag>Popular Culture</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Musical Theater? What should we expect?</title>
    <link href="/2020/08/19/AppropriatePlatform/"/>
    <url>/2020/08/19/AppropriatePlatform/</url>
    
    <content type="html"><![CDATA[<h1 id="Is-musical-theater-an-appropriate-platform"><a href="#Is-musical-theater-an-appropriate-platform" class="headerlink" title="Is musical theater an appropriate platform?"></a>Is musical theater an appropriate platform?</h1><p><a href="https://www.youtube.com/watch?v=Af3L9btBhuQ"><em><strong>West Side Story</strong></em></a></p><p><a href="https://www.bilibili.com/video/BV1d5411h7Pj?from=search&seid=6581838365131813981"><em><strong>South Pacific</strong></em></a></p><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p>Now that we have spent some time with musicals and various themes, do you think that musical theater is an appropriate platform for expressing these topics? Why?</p><h2 id="Ha"><a href="#Ha" class="headerlink" title="Ha"></a>Ha</h2><p>I think musical theater is an appropriate platform for expressing these topics. In fact, I think every form of art should express some ideological ideas, especially those involves words. The world is not Utopia, so people will have emotion, attitude, and their own understanding of what‚Äôs going on. Once we get emotions, we have to express it. Obvious, art is a suitable carrier for them. Musicals, as a presentation form of sound, is easier to be passed to people than visual art with the advance in analog technology (of course, digital now). Even if some people cannot see the performance at first, I will still be interested in musicals.</p>]]></content>
    
    
    <categories>
      
      <category>Music üéµ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ideology</tag>
      
      <tag>Music</tag>
      
      <tag>Hip-hop</tag>
      
      <tag>Musical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Folding Beijing</title>
    <link href="/2020/07/27/FoldingBeijing/"/>
    <url>/2020/07/27/FoldingBeijing/</url>
    
    <content type="html"><![CDATA[<h1 id="Âåó‰∫¨ÊäòÂè†"><a href="#Âåó‰∫¨ÊäòÂè†" class="headerlink" title="Âåó‰∫¨ÊäòÂè†"></a>Âåó‰∫¨ÊäòÂè†</h1><h2 id="ÈÉùÊôØËä≥"><a href="#ÈÉùÊôØËä≥" class="headerlink" title="ÈÉùÊôØËä≥"></a>ÈÉùÊôØËä≥</h2><blockquote><p>Their (First Space) allotted time lasted from six o‚Äôclock in the morning to six o‚Äôclock the next morning. Then the space went to sleep, and the earth flipped. (‚ÄúFolding Beijing‚Äù, P.7)</p></blockquote><blockquote><p>Twenty-five million people lived in Second Space, and their allotted time lasted from six o‚Äôclock that second day to ten o‚Äôclock at night. Fifty million people lived in Third Space, allotted the time from ten o‚Äôclock at night to six o‚Äôclock in the morning, at which point First Space returned. (‚ÄúFolding Beijing‚Äù, P.7)</p></blockquote><blockquote><p>Time had been carefully divided and parceled out to separate the population: Five million enjoyed the use of twenty-four hours, and seventy-five million enjoyed the next twenty-four hours. (‚ÄúFolding Beijing‚Äù, P.7)</p></blockquote><p>In terms of time, at the beginning of Section 2, the author introduces the allotted time use for each space. For example, the allotted time for First Space with 5 million population is 24 hours from 6 a.m. to 6 a.m.; the other two spaces with 75 million people share the next 24 hours. What difference does the time allowance make to the whole society of three classes? Why does the concept ‚Äútime‚Äù matter?</p><p>In terms of space, although the three classes share the same each surface, they live in three physically divided layers. What does the author imply with the folding layers? What political message does it convey? If the setting of the story was changed to other big cities like Paris or New York, would it still convey the same message?</p><p>The author sets the story in Beijing, the capital city of China, which has the most rigid Hukou (permanent residence, Êà∑Âè£) system in the world. For Chinese who were born out of Beijing, it is hard to obtain the city‚Äôs Hukou, as impossible as those in Third Space wants to enter First Space , unless he or she proves ‚Äúa useful professional‚Äù with a higher education degree or professional skill. If the setting of the story was changed to another big city in the world, such as New York or Paris, does it still convey the same political message? Would it still be praised and valued by the world? </p><p>Personally, I prefer to identify the novel as a metaphoric realistic novel with imagination, rather than a sci-fi, because I think a sci-fi should be based on hard science or technology. What do you think? </p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chinese Lit</tag>
      
      <tag>Sci-fi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Iron Child</title>
    <link href="/2020/07/21/IronChild/"/>
    <url>/2020/07/21/IronChild/</url>
    
    <content type="html"><![CDATA[<h1 id="ÈìÅÂ≠©"><a href="#ÈìÅÂ≠©" class="headerlink" title="ÈìÅÂ≠©"></a>ÈìÅÂ≠©</h1><h3 id="Ëé´Ë®Ä"><a href="#Ëé´Ë®Ä" class="headerlink" title="Ëé´Ë®Ä"></a>Ëé´Ë®Ä</h3><blockquote><p>I said, I‚Äôm a human, so how can I eat iron? Iron Child asked why human can‚Äôt eat iron. I‚Äôm a human and I can eat it. (Page 95)</p></blockquote><blockquote><p>As I began to chew, the flavor filled my mouth, tasting better and better until, before I know it, I had greedily finished off the whole thing. (Page 95)</p></blockquote><blockquote><p>I muttered to myself, Iron rails, iron rails, don‚Äôt get cocky, because if you do, I‚Äôll eat you up. (Page 96)</p></blockquote><p>These three quotes from Mo Yan‚Äôs ‚ÄúIron Child‚Äù demonstrate an interesting transition of the narrator from doubting, fearing to embracing ‚Äúeating iron‚Äù. It is also where the story develops from a realistic one into a magic one. At first, the narrator is unfamiliar with, maybe afraid of, the iron. Then, encouraged by the Iron Child (a pioneer of eating iron), the narrator tries to take a bite, and start chewing the iron. Finally, he even dares to challenge iron rails, which in the story symbolizes the ‚Äúgreat project‚Äù of the Great Leap Forward smelting campaign. I know that Mo Yan is a great magic-realism writer, but I can‚Äôt get the deep meaning of ‚ÄúIron Child‚Äù. Does eating iron symbolize people‚Äôs resistance to the project? Or does it suggest that people are poisoned by the insane time to become iron-like non-human beings without sympathy?</p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chinese Lit</tag>
      
      <tag>Sci-fi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Tunnel</title>
    <link href="/2020/07/20/TheTunnel/"/>
    <url>/2020/07/20/TheTunnel/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Tunnel"><a href="#The-Tunnel" class="headerlink" title="The Tunnel"></a>The Tunnel</h1><h3 id="ÈôàËã•Êõ¶"><a href="#ÈôàËã•Êõ¶" class="headerlink" title="ÈôàËã•Êõ¶"></a>ÈôàËã•Êõ¶</h3><blockquote><p>Lei Mei‚Äôs voice was soft and low and very pleasant to the ear. Master Hong‚Äôs wife had had a shrill voice and when excited she had sounded as if she were quarreling. His daughter-in-law‚Äôs voice was hoarse and always sounded as if she were short of breath. Li Mei was different. She spoke in a low voice as if whispering into his ears, and yet every word she spoke came to him like the clear notes of a bell. He could not hear enough of it and regretted that he had not heard it before. For the first time in his life, he become aware that a woman‚Äôs voice could actually be enchanting. (P 81)</p></blockquote><p>In some stories we read in class, the author portrays a female character by depicting her look, as Zhang Ailing does in ‚ÄúSealed Off‚Äù. In some, the author uses a figurative way to describe the female character, as Dai Wangshu does in his poem.  But in ‚ÄúThe Tunnel‚Äù, the author uses a different way. Besides the character‚Äôs look, She describes in detail Li Mei‚Äôs voice and compares it with other women‚Äôs to reveal the  personality of Li Mei. <a href="https://stanford.edu/class/linguist159/restricted/readings/Wolfram+Schilling2015-Chapter10.pdf">A Stanford University study</a> showed that people seem to hear some message in others‚Äô voice, such as the speakers‚Äô personality, mood, etc. When the author describes the voice of Master Hong‚Äôs wife, daughter-in-law, and Li Mei, what messages does she want to convey to her readers? Why is that Master Hong is enchanted by  Li Mei‚Äôs voice rather than by her look? Is it a more subtle way to suggest that Li Mei is different from all other women Master Hong met in his life? </p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chinese Lit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Adventures of Sanmao the Orphan</title>
    <link href="/2020/07/07/Sanmao/"/>
    <url>/2020/07/07/Sanmao/</url>
    
    <content type="html"><![CDATA[<h1 id="‰∏âÊØõÊµÅÊµ™ËÆ∞"><a href="#‰∏âÊØõÊµÅÊµ™ËÆ∞" class="headerlink" title="‰∏âÊØõÊµÅÊµ™ËÆ∞"></a>‰∏âÊØõÊµÅÊµ™ËÆ∞</h1><h3 id="Âº†‰πêÂπ≥"><a href="#Âº†‰πêÂπ≥" class="headerlink" title="Âº†‰πêÂπ≥"></a>Âº†‰πêÂπ≥</h3><p><img src="/images/sammao.png" alt="sanmao"></p><p>I think the scene depicted on this page is very striking by contrasting two extremely different worlds. In the wet, freezing winter in Shanghai, the setting of the story,  Sanmao is suffering from cold and hunger before he got his new cloth. However, in the house, rich people have two heaters on. It is so warm that there is a drop of sweat on the kid‚Äôs forehead, and he need to eat ice cream to cool himself. The contrast reminds me another story I read when I was kid, the Little Match Girl. On the New Year Eve, the hungry little girl in shabby clothes died when people were cheerfully celebrating the holiday in their warm house with rich food. Anderson is pessimistic and cruel when describing the miserable reality, while the author of Sanmao somewhat provides a hint of light  and hope to his character, because he cherishes great hope to the new country. </p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>manga</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sealed Off</title>
    <link href="/2020/07/06/SealedOff/"/>
    <url>/2020/07/06/SealedOff/</url>
    
    <content type="html"><![CDATA[<h1 id="Â∞ÅÈîÅ"><a href="#Â∞ÅÈîÅ" class="headerlink" title="Â∞ÅÈîÅ"></a>Â∞ÅÈîÅ</h1><h3 id="Âº†Áà±Áé≤"><a href="#Âº†Áà±Áé≤" class="headerlink" title="Âº†Áà±Áé≤"></a>Âº†Áà±Áé≤</h3><blockquote><p>Then she understood his meaning: everything that had happened while the city was sealed was a non-occurrence. The whole of Shanghai had dozed of, had dreamed an unreasonable dream. (Zhang 45)</p></blockquote><blockquote><p>The tramcar driver raised his voice in song: ‚ÄúSad, sad, sad! No money do I have! Sad, sad, sad ‚Äì ‚Äú An old beggar, thoroughly dazzed, limped across the street in front of the train. The driver bellowed at her. ‚ÄúYou swine!‚Äù (Zhang 45)</p></blockquote><p>These two excerpts are from the ending part of the short story, ‚ÄúSealed Off‚Äù.  After depicting Cuiyuan‚Äôs mental activity, i.e., her thought about the city dreaming an ‚Äúunreasonable dream‚Äù, the author ends the whole story with vulgar reality: the beggar, and the driver‚Äôs curse. This incident seems unpredicted to me and a little off topic. Why does the author end her story with the depiction of a random beggar and the driver‚Äôs bellow? Does she intend to describe what kind of person the tramcar driver is, or does she use the image of driver and beggar to symbolize something or someone? Why does the author end the whole story with a curse ‚ÄúYou swine!‚Äù? </p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chinese Lit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rainy Alley</title>
    <link href="/2020/06/30/RainyAlley/"/>
    <url>/2020/06/30/RainyAlley/</url>
    
    <content type="html"><![CDATA[<h1 id="Èõ®Â∑∑"><a href="#Èõ®Â∑∑" class="headerlink" title="Èõ®Â∑∑"></a>Èõ®Â∑∑</h1><h3 id="Êà¥ÊúõËàí"><a href="#Êà¥ÊúõËàí" class="headerlink" title="Êà¥ÊúõËàí"></a>Êà¥ÊúõËàí</h3><blockquote><p>walks silently,</p><p>apathetic, sad and disconsolate (P32 left)</p></blockquote><blockquote><p>As in  a dream she glides past</p><p>like a lilac spray,</p><p>this girl glides past beside me;</p><p>she silently moves away, moves away,</p><p>up to the broke-down bamboo fence,</p><p>to the end of the rainy alley. (P32 right)</p></blockquote><p>At first reading, the poem ‚ÄúRain Alley‚Äù sounds to me like describing the poet‚Äôs beloved and desired girl who passed by ‚Äúlike a lilac spray‚Äù, but considering the historical background of the poem and referring to some analysis of the poem, I realize that  it is not merely about love and pursuit for a specific girl. Dai Wangshu is using the image of a graceful girl, whom he loves, desires, yet misses the opportunity to get closer to as a personification of his beloved country. When he says ‚Äúapathetic, sad and disconsolate‚Äù and ‚Äúbroke-down bamboo fence‚Äù, he is referring to his home country who is experiencing hard times. The ‚Äúmoving away‚Äù girl also symbolizes the disillusion of his passion and wish. </p><p>I also read a different translated version by Gladys Yang and Xianyi Yang. which I like better. For example, the counterpart of the  line ‚Äúapathetic, sad, and disconsolate‚Äù is ‚Äúaloof, sad, and melancholy‚Äù in Gladys and Xianyi‚Äôs version. The original text in Chinese is ‚ÄúÂÜ∑Êº†ÔºåÂáÑÊ∏ÖÔºåÂèàÊÉÜÊÄÖ‚Äù„ÄÇCompared with apathetic, which means ‚Äúhaving or showing little or no emotion‚Äù (Merriam-Webster.com), aloof , which means ‚Äú distant either physically or emotionally‚Äù, is a better translation of ‚ÄúÂÜ∑Êº†‚ÄùÔºåbecause it vividly portrays the poet‚Äôs desire to catch and the feeling of lack of capacity. Another word ‚Äúmelancholy‚Äù is  more poetic-sounding than ‚Äúdisconsolate‚Äù, and more accurate to the Chinese word ‚ÄúÊÉÜÊÄÖ‚ÄúÔºå which doesn‚Äôt only mean cheerless, but also depression of sprits. </p><p>My question after reading this poem and the poem ‚ÄúDead Water‚Äù is: Why did both poets use personalization to refer to their home country in the poem instead of expressing it in a direct way? </p><p>P.S. The Gradys and Xianyi Yang‚Äôs translation </p><blockquote><p><strong>A Lane in the Rain</strong></p><p><em>Dai Wangshu</em></p><p><em>Êù®ÂÆ™Áõä„ÄÅÊà¥‰πÉËø≠ ËØë</em></p><p>Alone holding an oil-paper umbrella,</p><p>I wander along a long</p><p>Solitary lane in the rain,</p><p>Hoping to encounter</p><p>A girl like a bouquet of lilacs</p><p>Gnawed by anxiety and resentment.</p><p>A girl</p><p>The colour of lilacs,</p><p>The fragrance of lilacs,</p><p>With the worries of lilacs,</p><p>Feeling melancholy in the rain,</p><p>Plaintive and hesitating.</p><p>She wanders along the solitary lane in the rain,</p><p>Holding an oil-paper umbrella</p><p>Just as I do,</p><p>Just like me,</p><p>Walking slowly in silence,</p><p>Aloof, sad and melancholy.</p><p>Silently she comes closer,</p><p>Closer, giving me</p><p>A glance like a sigh;</p><p>Then she floats past</p><p>Like a dream,</p><p>Dreary and blank like a dream.</p><p>Like a lilac</p><p>Floating past in a dream,</p><p>the girl floats past me;</p><p>Silently she goes further and further,</p><p>To the crumbling wall,</p><p>Out of the lane in the rain.</p><p>In the mournful melody of the rain,</p><p>Her colour has faded,</p><p>Her fragrance has disappeared,</p><p>Vanished into the void;</p><p>Even her glance like a sigh,</p><p>Melancholy like lilacs.</p><p>Alone, holding an oil-paper umbrella,</p><p>I wander along a long</p><p>Solitary lane in the rain,</p><p>Hoping to pass</p><p>A girl like a bouquet of lilacs</p><p>Gnawed by anxiety and resentment.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chinese Lit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An Old and Established Name</title>
    <link href="/2020/06/29/AnOldAndEstablishedName/"/>
    <url>/2020/06/29/AnOldAndEstablishedName/</url>
    
    <content type="html"><![CDATA[<h1 id="ËÄÅÂ≠óÂè∑"><a href="#ËÄÅÂ≠óÂè∑" class="headerlink" title="ËÄÅÂ≠óÂè∑"></a>ËÄÅÂ≠óÂè∑</h1><h3 id="ËÄÅËàç"><a href="#ËÄÅËàç" class="headerlink" title="ËÄÅËàç"></a>ËÄÅËàç</h3><blockquote><p>  Manager Zhou even went a step further; if a customer bought one foot of material, he‚Äôd give him an extra one free and throw in a foreign doll for the kids. And now all the apprentices were expected to joke and make small talk with the customers. (P25-26)</p></blockquote><blockquote><p>  He (Xin Dezhi) had to learn tricks to be employed in measuring the cloth - he was even expected to use his finger on the sly to pinch back a bit of the cloth before cutting it! (P27)</p></blockquote><blockquote><p>  Then he issued an order: ‚ÄúWhen a customer comes in, show him the Japanese goods first. None of the other places dare to sell them, so we might as well make hay while the sun shines. If a farmer comes in, tell him straight out that it is Japanese cloth; they‚Äôll buy it anyway. But if someone from the city comes in, then say it‚Äôs German material.‚Äù (P27)</p></blockquote><p>The contrasts between ‚Äúold‚Äù and ‚Äúnew‚Äù, ‚Äútradition‚Äù and ‚Äúmodernization‚Äù in both essays interest me. In ‚ÄúAn Old and Established Name‚Äù, Manager Zhou brings a series of changes to a traditional old clothing store. Many of them aim to improve the old store‚Äôs management, while some are tricks on how to deal with customers. These ‚Äúreformation‚Äù approaches do increase the store‚Äôs profits, but in some cases, the profits are gained at the cost of cheating customers. Considering the essay‚Äôs historical background, when China was going through dramatic changes under the influence of the West, I can feel the author‚Äôs hesitant and sometimes conflicting attitudes towards these changes. On one hand, he embraces the changes in the hope that they would make the country better. On the other hand, he expresses his concern about the harms of the changes. I think in ‚ÄúSpring Silkworms‚Äù, Mao Dun shows the same concern and a hint of uncertainty for the future. Interestingly, the development of society is like a clock pendulum. People at Lao She and Mao Dun‚Äôs time expected new things, while at the present, people show a nostalgic feeling to ‚Äúold things‚Äù. I have been to many old and traditional restaurants in Beijing established when Lao She was alive, like  <a href="https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC%E7%8E%89%E5%8D%8E%E5%8F%B0">Yuhuatai</a>, and they are still making good profits before the pandemic for their established name. </p><p>These two essays were both written at a time when the whole country was experiencing the ‚Äúnew culture campaign‚Äù and people were expecting modernity to replace the old traditions, while today‚Äôs literature shows a nostalgic vibe. Why is it? How could we understand the conflict between ‚Äúold‚Äù and ‚Äúnew‚Äù in reading literature? </p>]]></content>
    
    
    <categories>
      
      <category>Literature üìñ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chinese Lit</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
